
LAB4-FIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc8  08003dc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc8  08003dc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08003e40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003e40  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d252  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb8  00000000  00000000  0002d2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d6  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee09  00000000  00000000  00049046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888a0  00000000  00000000  00057e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e06ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000e0740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c68 	.word	0x08003c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c68 	.word	0x08003c68

0800014c <SCH_Delete_Task>:

sTask SCH_tasks_G[SCH_MAX_TASK];

unsigned char cur_0_tasks = 0;

unsigned char SCH_Delete_Task(const unsigned char task_index){
 800014c:	b4b0      	push	{r4, r5, r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	unsigned char return_code =0;
 8000156:	2300      	movs	r3, #0
 8000158:	73fb      	strb	r3, [r7, #15]
	if(SCH_tasks_G[task_index].pTask==0){
 800015a:	79fa      	ldrb	r2, [r7, #7]
 800015c:	4939      	ldr	r1, [pc, #228]	; (8000244 <SCH_Delete_Task+0xf8>)
 800015e:	4613      	mov	r3, r2
 8000160:	009b      	lsls	r3, r3, #2
 8000162:	4413      	add	r3, r2
 8000164:	009b      	lsls	r3, r3, #2
 8000166:	440b      	add	r3, r1
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d102      	bne.n	8000174 <SCH_Delete_Task+0x28>

		// neu khong co task return 1
		return_code =1;
 800016e:	2301      	movs	r3, #1
 8000170:	73fb      	strb	r3, [r7, #15]
 8000172:	e001      	b.n	8000178 <SCH_Delete_Task+0x2c>


	}else {
		return_code=0;
 8000174:	2300      	movs	r3, #0
 8000176:	73fb      	strb	r3, [r7, #15]
	}
	for (int i = task_index + 1; i < SCH_MAX_TASK; i++) {
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	3301      	adds	r3, #1
 800017c:	60bb      	str	r3, [r7, #8]
 800017e:	e021      	b.n	80001c4 <SCH_Delete_Task+0x78>
			if (!(SCH_tasks_G[i].pTask)) break;
 8000180:	4930      	ldr	r1, [pc, #192]	; (8000244 <SCH_Delete_Task+0xf8>)
 8000182:	68ba      	ldr	r2, [r7, #8]
 8000184:	4613      	mov	r3, r2
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	4413      	add	r3, r2
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	440b      	add	r3, r1
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d01b      	beq.n	80001cc <SCH_Delete_Task+0x80>
			SCH_tasks_G[i-1] = SCH_tasks_G[i];
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	1e5a      	subs	r2, r3, #1
 8000198:	492a      	ldr	r1, [pc, #168]	; (8000244 <SCH_Delete_Task+0xf8>)
 800019a:	4613      	mov	r3, r2
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	4413      	add	r3, r2
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	18c8      	adds	r0, r1, r3
 80001a4:	4927      	ldr	r1, [pc, #156]	; (8000244 <SCH_Delete_Task+0xf8>)
 80001a6:	68ba      	ldr	r2, [r7, #8]
 80001a8:	4613      	mov	r3, r2
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	4413      	add	r3, r2
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	440b      	add	r3, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	461d      	mov	r5, r3
 80001b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ba:	682b      	ldr	r3, [r5, #0]
 80001bc:	6023      	str	r3, [r4, #0]
	for (int i = task_index + 1; i < SCH_MAX_TASK; i++) {
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	3301      	adds	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2b09      	cmp	r3, #9
 80001c8:	ddda      	ble.n	8000180 <SCH_Delete_Task+0x34>
 80001ca:	e000      	b.n	80001ce <SCH_Delete_Task+0x82>
			if (!(SCH_tasks_G[i].pTask)) break;
 80001cc:	bf00      	nop
		}
	cur_0_tasks--;
 80001ce:	4b1e      	ldr	r3, [pc, #120]	; (8000248 <SCH_Delete_Task+0xfc>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4b1c      	ldr	r3, [pc, #112]	; (8000248 <SCH_Delete_Task+0xfc>)
 80001d8:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[cur_0_tasks].pTask=0x0000;
 80001da:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <SCH_Delete_Task+0xfc>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	4619      	mov	r1, r3
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <SCH_Delete_Task+0xf8>)
 80001e2:	460b      	mov	r3, r1
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	440b      	add	r3, r1
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	4413      	add	r3, r2
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_0_tasks].Delay=0;
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <SCH_Delete_Task+0xfc>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	4619      	mov	r1, r3
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <SCH_Delete_Task+0xf8>)
 80001f8:	460b      	mov	r3, r1
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	440b      	add	r3, r1
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	4413      	add	r3, r2
 8000202:	3304      	adds	r3, #4
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_0_tasks].Period=0;
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <SCH_Delete_Task+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4619      	mov	r1, r3
 800020e:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <SCH_Delete_Task+0xf8>)
 8000210:	460b      	mov	r3, r1
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	440b      	add	r3, r1
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	4413      	add	r3, r2
 800021a:	3308      	adds	r3, #8
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[cur_0_tasks].RunMe=0;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <SCH_Delete_Task+0xfc>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4619      	mov	r1, r3
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <SCH_Delete_Task+0xf8>)
 8000228:	460b      	mov	r3, r1
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	330c      	adds	r3, #12
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]

	return return_code;
 8000238:	7bfb      	ldrb	r3, [r7, #15]



}
 800023a:	4618      	mov	r0, r3
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bcb0      	pop	{r4, r5, r7}
 8000242:	4770      	bx	lr
 8000244:	2000008c 	.word	0x2000008c
 8000248:	20000154 	.word	0x20000154

0800024c <SCH_Init>:

void SCH_Init(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i=0;i<SCH_MAX_TASK;i++){
 8000252:	2300      	movs	r3, #0
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	e006      	b.n	8000266 <SCH_Init+0x1a>

		SCH_Delete_Task(i);
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff76 	bl	800014c <SCH_Delete_Task>
	for(i=0;i<SCH_MAX_TASK;i++){
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	3301      	adds	r3, #1
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b09      	cmp	r3, #9
 800026a:	d9f5      	bls.n	8000258 <SCH_Init+0xc>

	}
	cur_0_tasks=0;
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <SCH_Init+0x30>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]


}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000154 	.word	0x20000154

08000280 <SCH_Update>:
void SCH_Update(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[0].pTask) {
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <SCH_Update+0x44>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d016      	beq.n	80002ba <SCH_Update+0x3a>
			// Not yet ready to run: just decrement the delay
			SCH_tasks_G[0].Delay -= 1;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <SCH_Update+0x44>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	3b01      	subs	r3, #1
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <SCH_Update+0x44>)
 8000294:	6053      	str	r3, [r2, #4]
			// Check if there is a task at this location
			if (SCH_tasks_G[0].Delay <= 0) { // || SCH_tasks_G[0].Delay <= SCH_tasks_G[0].Offset) {
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <SCH_Update+0x44>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	dc0d      	bgt.n	80002ba <SCH_Update+0x3a>
				// The task is due to run
				// Increase the 'RunMe' flag
				SCH_tasks_G[0].RunMe += 1;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <SCH_Update+0x44>)
 80002a0:	7b1b      	ldrb	r3, [r3, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <SCH_Update+0x44>)
 80002a8:	731a      	strb	r2, [r3, #12]
				//SCH_tasks_G[0].Offset = 0;
				if (SCH_tasks_G[0].Period) {
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SCH_Update+0x44>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <SCH_Update+0x3a>
					// Schedule periodic tasks to run again
					SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <SCH_Update+0x44>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <SCH_Update+0x44>)
 80002b8:	6053      	str	r3, [r2, #4]
				}
			}
}
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2000008c 	.word	0x2000008c

080002c8 <SCH_Add_Task>:
unsigned char SCH_Add_Task(void (* pFunction) (), unsigned int DELAY, unsigned int PERIOD) {
 80002c8:	b4b0      	push	{r4, r5, r7}
 80002ca:	b08b      	sub	sp, #44	; 0x2c
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	// Task structure is overload
		if (cur_0_tasks >= SCH_MAX_TASK) {
 80002d4:	4b6c      	ldr	r3, [pc, #432]	; (8000488 <SCH_Add_Task+0x1c0>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b09      	cmp	r3, #9
 80002da:	d901      	bls.n	80002e0 <SCH_Add_Task+0x18>
			return SCH_MAX_TASK;
 80002dc:	230a      	movs	r3, #10
 80002de:	e0ce      	b.n	800047e <SCH_Add_Task+0x1b6>
		}

		unsigned int DELAY_CNT = DELAY / TICKS;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4a6a      	ldr	r2, [pc, #424]	; (800048c <SCH_Add_Task+0x1c4>)
 80002e4:	fba2 2303 	umull	r2, r3, r2, r3
 80002e8:	08db      	lsrs	r3, r3, #3
 80002ea:	61bb      	str	r3, [r7, #24]
		unsigned int PERIOD_CNT = PERIOD / TICKS;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a67      	ldr	r2, [pc, #412]	; (800048c <SCH_Add_Task+0x1c4>)
 80002f0:	fba2 2303 	umull	r2, r3, r2, r3
 80002f4:	08db      	lsrs	r3, r3, #3
 80002f6:	617b      	str	r3, [r7, #20]

		// Task structure is available
		unsigned char Index = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		unsigned int sum_delay = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	623b      	str	r3, [r7, #32]
		for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8000302:	2300      	movs	r3, #0
 8000304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000308:	e02d      	b.n	8000366 <SCH_Add_Task+0x9e>
			if (!(SCH_tasks_G[Index].pTask)) break;
 800030a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800030e:	4960      	ldr	r1, [pc, #384]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000310:	4613      	mov	r3, r2
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	4413      	add	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	440b      	add	r3, r1
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d027      	beq.n	8000370 <SCH_Add_Task+0xa8>
			if (sum_delay + SCH_tasks_G[Index].Delay > DELAY_CNT) break; // TIM DUOC INDEX
 8000320:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000324:	495a      	ldr	r1, [pc, #360]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000326:	4613      	mov	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	440b      	add	r3, r1
 8000330:	3304      	adds	r3, #4
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	6a3b      	ldr	r3, [r7, #32]
 8000338:	4413      	add	r3, r2
 800033a:	69ba      	ldr	r2, [r7, #24]
 800033c:	429a      	cmp	r2, r3
 800033e:	d319      	bcc.n	8000374 <SCH_Add_Task+0xac>
			sum_delay += SCH_tasks_G[Index].Delay;
 8000340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000344:	4952      	ldr	r1, [pc, #328]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	3304      	adds	r3, #4
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	4413      	add	r3, r2
 800035a:	623b      	str	r3, [r7, #32]
		for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 800035c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000360:	3301      	adds	r3, #1
 8000362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800036a:	2b09      	cmp	r3, #9
 800036c:	d9cd      	bls.n	800030a <SCH_Add_Task+0x42>
 800036e:	e002      	b.n	8000376 <SCH_Add_Task+0xae>
			if (!(SCH_tasks_G[Index].pTask)) break;
 8000370:	bf00      	nop
 8000372:	e000      	b.n	8000376 <SCH_Add_Task+0xae>
			if (sum_delay + SCH_tasks_G[Index].Delay > DELAY_CNT) break; // TIM DUOC INDEX
 8000374:	bf00      	nop
		}
		// Index - the position want to add

		// Shift other position after Index
		for (int i = SCH_MAX_TASK - 2; i >= 0; i--) {
 8000376:	2308      	movs	r3, #8
 8000378:	61fb      	str	r3, [r7, #28]
 800037a:	e029      	b.n	80003d0 <SCH_Add_Task+0x108>
			if (i < Index) break;
 800037c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000380:	69fa      	ldr	r2, [r7, #28]
 8000382:	429a      	cmp	r2, r3
 8000384:	db28      	blt.n	80003d8 <SCH_Add_Task+0x110>
			if (!(SCH_tasks_G[Index].pTask)) continue;
 8000386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800038a:	4941      	ldr	r1, [pc, #260]	; (8000490 <SCH_Add_Task+0x1c8>)
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d015      	beq.n	80003c8 <SCH_Add_Task+0x100>
			SCH_tasks_G[i+1] = SCH_tasks_G[i];
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	493b      	ldr	r1, [pc, #236]	; (8000490 <SCH_Add_Task+0x1c8>)
 80003a2:	4613      	mov	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	18c8      	adds	r0, r1, r3
 80003ac:	4938      	ldr	r1, [pc, #224]	; (8000490 <SCH_Add_Task+0x1c8>)
 80003ae:	69fa      	ldr	r2, [r7, #28]
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	4604      	mov	r4, r0
 80003bc:	461d      	mov	r5, r3
 80003be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c2:	682b      	ldr	r3, [r5, #0]
 80003c4:	6023      	str	r3, [r4, #0]
 80003c6:	e000      	b.n	80003ca <SCH_Add_Task+0x102>
			if (!(SCH_tasks_G[Index].pTask)) continue;
 80003c8:	bf00      	nop
		for (int i = SCH_MAX_TASK - 2; i >= 0; i--) {
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	61fb      	str	r3, [r7, #28]
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	dad2      	bge.n	800037c <SCH_Add_Task+0xb4>
 80003d6:	e000      	b.n	80003da <SCH_Add_Task+0x112>
			if (i < Index) break;
 80003d8:	bf00      	nop
		}
		SCH_tasks_G[Index+1].Delay -= (DELAY_CNT - sum_delay); // DIEU CHINH TG CHO TASK KE TIEP = TG TRE TASK MOI - TG TRE TASK VUA CHEN
 80003da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	492b      	ldr	r1, [pc, #172]	; (8000490 <SCH_Add_Task+0x1c8>)
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	3304      	adds	r3, #4
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	6a3a      	ldr	r2, [r7, #32]
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	4419      	add	r1, r3
 80003fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	4608      	mov	r0, r1
 8000402:	4923      	ldr	r1, [pc, #140]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	3304      	adds	r3, #4
 8000410:	6018      	str	r0, [r3, #0]
		// Assign Index position
		SCH_tasks_G[Index].pTask = pFunction;
 8000412:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000416:	491e      	ldr	r1, [pc, #120]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	440b      	add	r3, r1
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Delay = DELAY_CNT - sum_delay;
 8000426:	69ba      	ldr	r2, [r7, #24]
 8000428:	6a3b      	ldr	r3, [r7, #32]
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000430:	4618      	mov	r0, r3
 8000432:	4917      	ldr	r1, [pc, #92]	; (8000490 <SCH_Add_Task+0x1c8>)
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	3304      	adds	r3, #4
 8000440:	6018      	str	r0, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD_CNT;
 8000442:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000446:	6979      	ldr	r1, [r7, #20]
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <SCH_Add_Task+0x1c8>)
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4403      	add	r3, r0
 8000454:	3308      	adds	r3, #8
 8000456:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].RunMe = 0;
 8000458:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800045c:	490c      	ldr	r1, [pc, #48]	; (8000490 <SCH_Add_Task+0x1c8>)
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	440b      	add	r3, r1
 8000468:	330c      	adds	r3, #12
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]

		// Increase number of tasks
		cur_0_tasks++;
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <SCH_Add_Task+0x1c0>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SCH_Add_Task+0x1c0>)
 8000478:	701a      	strb	r2, [r3, #0]
		return Index;
 800047a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		SCH_tasks_G[Index].Period = PERIOD / TICKS;
		SCH_tasks_G[Index].RunMe = 0;

		return Index;
		*/
}
 800047e:	4618      	mov	r0, r3
 8000480:	372c      	adds	r7, #44	; 0x2c
 8000482:	46bd      	mov	sp, r7
 8000484:	bcb0      	pop	{r4, r5, r7}
 8000486:	4770      	bx	lr
 8000488:	20000154 	.word	0x20000154
 800048c:	cccccccd 	.word	0xcccccccd
 8000490:	2000008c 	.word	0x2000008c

08000494 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8000494:	b5b0      	push	{r4, r5, r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[0].RunMe > 0 || SCH_tasks_G[0].Delay <= 0) {
 800049a:	4b62      	ldr	r3, [pc, #392]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 800049c:	7b1b      	ldrb	r3, [r3, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d104      	bne.n	80004ac <SCH_Dispatch_Tasks+0x18>
 80004a2:	4b60      	ldr	r3, [pc, #384]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	f300 80b7 	bgt.w	800061a <SCH_Dispatch_Tasks+0x186>
			int diff = time_stamp;
 80004ac:	4b5e      	ldr	r3, [pc, #376]	; (8000628 <SCH_Dispatch_Tasks+0x194>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	61bb      	str	r3, [r7, #24]
			(* SCH_tasks_G[0].pTask)();	// Run the task
 80004b2:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4798      	blx	r3

			if (SCH_tasks_G[0].RunMe > 0) SCH_tasks_G[0].RunMe -= 1;	// Reset/reduce RunMe flag
 80004b8:	4b5a      	ldr	r3, [pc, #360]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004ba:	7b1b      	ldrb	r3, [r3, #12]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d005      	beq.n	80004cc <SCH_Dispatch_Tasks+0x38>
 80004c0:	4b58      	ldr	r3, [pc, #352]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004c2:	7b1b      	ldrb	r3, [r3, #12]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b56      	ldr	r3, [pc, #344]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004ca:	731a      	strb	r2, [r3, #12]
			// Periodic tasks will automatically run again
			// - if this is a 'one shot' task, remove it from the array
			if (SCH_tasks_G[0].Period == 0) {
 80004cc:	4b55      	ldr	r3, [pc, #340]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <SCH_Dispatch_Tasks+0x48>
				SCH_Delete_Task(0);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff fe39 	bl	800014c <SCH_Delete_Task>
 80004da:	e077      	b.n	80005cc <SCH_Dispatch_Tasks+0x138>
			} else if (SCH_tasks_G[0].RunMe <= 0 && cur_0_tasks > 1) {
 80004dc:	4b51      	ldr	r3, [pc, #324]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004de:	7b1b      	ldrb	r3, [r3, #12]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d173      	bne.n	80005cc <SCH_Dispatch_Tasks+0x138>
 80004e4:	4b51      	ldr	r3, [pc, #324]	; (800062c <SCH_Dispatch_Tasks+0x198>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d96f      	bls.n	80005cc <SCH_Dispatch_Tasks+0x138>
				SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 80004ec:	4b4d      	ldr	r3, [pc, #308]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a4c      	ldr	r2, [pc, #304]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004f2:	6053      	str	r3, [r2, #4]
				sTask expired_task = SCH_tasks_G[0];
 80004f4:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80004f6:	1d3c      	adds	r4, r7, #4
 80004f8:	461d      	mov	r5, r3
 80004fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fe:	682b      	ldr	r3, [r5, #0]
 8000500:	6023      	str	r3, [r4, #0]
				for (int i = 1; i < SCH_MAX_TASK; i++) {
 8000502:	2301      	movs	r3, #1
 8000504:	61fb      	str	r3, [r7, #28]
 8000506:	e05c      	b.n	80005c2 <SCH_Dispatch_Tasks+0x12e>
					if (!(SCH_tasks_G[i].pTask)) {
 8000508:	4946      	ldr	r1, [pc, #280]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 800050a:	69fa      	ldr	r2, [r7, #28]
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	440b      	add	r3, r1
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d056      	beq.n	80005ca <SCH_Dispatch_Tasks+0x136>
						//sbSCH_tasks_G[i].Offset += 1;
						break;
					}
					if (expired_task.Delay >= SCH_tasks_G[i].Delay) {
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	4841      	ldr	r0, [pc, #260]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000520:	69fa      	ldr	r2, [r7, #28]
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4403      	add	r3, r0
 800052c:	3304      	adds	r3, #4
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4299      	cmp	r1, r3
 8000532:	db2e      	blt.n	8000592 <SCH_Dispatch_Tasks+0xfe>
						expired_task.Delay -= SCH_tasks_G[i].Delay;
 8000534:	68b9      	ldr	r1, [r7, #8]
 8000536:	483b      	ldr	r0, [pc, #236]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000538:	69fa      	ldr	r2, [r7, #28]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4403      	add	r3, r0
 8000544:	3304      	adds	r3, #4
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	1acb      	subs	r3, r1, r3
 800054a:	60bb      	str	r3, [r7, #8]
						//if (SCH_tasks_G[i].Delay == 0) expired_task.Offset += 1;
						SCH_tasks_G[i-1] = SCH_tasks_G[i];
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	4934      	ldr	r1, [pc, #208]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	18c8      	adds	r0, r1, r3
 800055c:	4931      	ldr	r1, [pc, #196]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	440b      	add	r3, r1
 800056a:	4604      	mov	r4, r0
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	682b      	ldr	r3, [r5, #0]
 8000574:	6023      	str	r3, [r4, #0]
						SCH_tasks_G[i] = expired_task;
 8000576:	492b      	ldr	r1, [pc, #172]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000578:	69fa      	ldr	r2, [r7, #28]
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	461d      	mov	r5, r3
 8000586:	1d3c      	adds	r4, r7, #4
 8000588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800058a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	602b      	str	r3, [r5, #0]
 8000590:	e014      	b.n	80005bc <SCH_Dispatch_Tasks+0x128>
					} else {
						SCH_tasks_G[i].Delay -= expired_task.Delay;
 8000592:	4924      	ldr	r1, [pc, #144]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000594:	69fa      	ldr	r2, [r7, #28]
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	3304      	adds	r3, #4
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	1ad1      	subs	r1, r2, r3
 80005a8:	481e      	ldr	r0, [pc, #120]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80005aa:	69fa      	ldr	r2, [r7, #28]
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4403      	add	r3, r0
 80005b6:	3304      	adds	r3, #4
 80005b8:	6019      	str	r1, [r3, #0]
						//if (expired_task.Delay == 0) SCH_tasks_G[i].Offset += 1;
						break;
 80005ba:	e007      	b.n	80005cc <SCH_Dispatch_Tasks+0x138>
				for (int i = 1; i < SCH_MAX_TASK; i++) {
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	3301      	adds	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	dd9f      	ble.n	8000508 <SCH_Dispatch_Tasks+0x74>
 80005c8:	e000      	b.n	80005cc <SCH_Dispatch_Tasks+0x138>
						break;
 80005ca:	bf00      	nop
					}
				}
			}
			diff = time_stamp - diff;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <SCH_Dispatch_Tasks+0x194>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	61bb      	str	r3, [r7, #24]
			time_offset += diff;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	4413      	add	r3, r2
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 80005e0:	6013      	str	r3, [r2, #0]
			if (SCH_tasks_G[0].Delay - time_offset > 0) {
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd0a      	ble.n	8000606 <SCH_Dispatch_Tasks+0x172>
				SCH_tasks_G[0].Delay -= time_offset;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 80005fc:	6053      	str	r3, [r2, #4]
				time_offset = 0;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
		// Report system status
		//SCH_Report_Status();
		// The scheduler enters idle mode at this point
		//SCH_Go_To_Sleep();
		*/
	}
 8000604:	e009      	b.n	800061a <SCH_Dispatch_Tasks+0x186>
				time_offset -= SCH_tasks_G[0].Delay;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <SCH_Dispatch_Tasks+0x19c>)
 8000612:	6013      	str	r3, [r2, #0]
				SCH_tasks_G[0].Delay = 0;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <SCH_Dispatch_Tasks+0x190>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
	}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	200001bc 	.word	0x200001bc
 800062c:	20000154 	.word	0x20000154
 8000630:	200001c0 	.word	0x200001c0

08000634 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BUTTON_Pin)
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d114      	bne.n	800066e <HAL_GPIO_EXTI_Callback+0x3a>
    {
      if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET) {
 8000644:	2101      	movs	r1, #1
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <HAL_GPIO_EXTI_Callback+0x44>)
 8000648:	f001 f800 	bl	800164c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10d      	bne.n	800066e <HAL_GPIO_EXTI_Callback+0x3a>
            HAL_UART_Transmit(&huart2, (uint8_t *)"Button is pressed\r\n", 19, 1000);
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	2213      	movs	r2, #19
 8000658:	4908      	ldr	r1, [pc, #32]	; (800067c <HAL_GPIO_EXTI_Callback+0x48>)
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <HAL_GPIO_EXTI_Callback+0x4c>)
 800065c:	f002 f892 	bl	8002784 <HAL_UART_Transmit>

            SCH_Add_Task(TASK_5, 2000, 3000);
 8000660:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000664:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <HAL_GPIO_EXTI_Callback+0x50>)
 800066a:	f7ff fe2d 	bl	80002c8 <SCH_Add_Task>
        }
    }
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010c00 	.word	0x40010c00
 800067c:	08003c80 	.word	0x08003c80
 8000680:	2000020c 	.word	0x2000020c
 8000684:	08000dcd 	.word	0x08000dcd

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fc1b 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f8ab 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f95b 	bl	8000950 <MX_GPIO_Init>
  MX_TIM2_Init();
 800069a:	f000 f8e3 	bl	8000864 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f92d 	bl	80008fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006a2:	4847      	ldr	r0, [pc, #284]	; (80007c0 <main+0x138>)
 80006a4:	f001 fc92 	bl	8001fcc <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80006a8:	f7ff fdd0 	bl	800024c <SCH_Init>
  unsigned char task_index=0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
  task_index = SCH_Add_Task(TASK_0, 500, 500);
 80006b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006b8:	4842      	ldr	r0, [pc, #264]	; (80007c4 <main+0x13c>)
 80006ba:	f7ff fe05 	bl	80002c8 <SCH_Add_Task>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
   HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4940      	ldr	r1, [pc, #256]	; (80007c8 <main+0x140>)
 80006c8:	4840      	ldr	r0, [pc, #256]	; (80007cc <main+0x144>)
 80006ca:	f002 fe53 	bl	8003374 <siprintf>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	493d      	ldr	r1, [pc, #244]	; (80007cc <main+0x144>)
 80006d8:	483d      	ldr	r0, [pc, #244]	; (80007d0 <main+0x148>)
 80006da:	f002 f853 	bl	8002784 <HAL_UART_Transmit>
  task_index = SCH_Add_Task(TASK_1, 1000, 1000);
 80006de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e6:	483b      	ldr	r0, [pc, #236]	; (80007d4 <main+0x14c>)
 80006e8:	f7ff fdee 	bl	80002c8 <SCH_Add_Task>
 80006ec:	4603      	mov	r3, r0
 80006ee:	71fb      	strb	r3, [r7, #7]
   HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4934      	ldr	r1, [pc, #208]	; (80007c8 <main+0x140>)
 80006f6:	4835      	ldr	r0, [pc, #212]	; (80007cc <main+0x144>)
 80006f8:	f002 fe3c 	bl	8003374 <siprintf>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	4931      	ldr	r1, [pc, #196]	; (80007cc <main+0x144>)
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <main+0x148>)
 8000708:	f002 f83c 	bl	8002784 <HAL_UART_Transmit>
   task_index = SCH_Add_Task(TASK_2, 1500, 1500);
 800070c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000710:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000714:	4830      	ldr	r0, [pc, #192]	; (80007d8 <main+0x150>)
 8000716:	f7ff fdd7 	bl	80002c8 <SCH_Add_Task>
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
   HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	461a      	mov	r2, r3
 8000722:	4929      	ldr	r1, [pc, #164]	; (80007c8 <main+0x140>)
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <main+0x144>)
 8000726:	f002 fe25 	bl	8003374 <siprintf>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	4926      	ldr	r1, [pc, #152]	; (80007cc <main+0x144>)
 8000734:	4826      	ldr	r0, [pc, #152]	; (80007d0 <main+0x148>)
 8000736:	f002 f825 	bl	8002784 <HAL_UART_Transmit>
   task_index = SCH_Add_Task(TASK_3, 2000, 2000);
 800073a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800073e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <main+0x154>)
 8000744:	f7ff fdc0 	bl	80002c8 <SCH_Add_Task>
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
   HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	461a      	mov	r2, r3
 8000750:	491d      	ldr	r1, [pc, #116]	; (80007c8 <main+0x140>)
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <main+0x144>)
 8000754:	f002 fe0e 	bl	8003374 <siprintf>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	491a      	ldr	r1, [pc, #104]	; (80007cc <main+0x144>)
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <main+0x148>)
 8000764:	f002 f80e 	bl	8002784 <HAL_UART_Transmit>
   task_index = SCH_Add_Task(TASK_4, 2500, 2500);
 8000768:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800076c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <main+0x158>)
 8000772:	f7ff fda9 	bl	80002c8 <SCH_Add_Task>
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
   HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added\r\n", task_index), 1000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	461a      	mov	r2, r3
 800077e:	4912      	ldr	r1, [pc, #72]	; (80007c8 <main+0x140>)
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <main+0x144>)
 8000782:	f002 fdf7 	bl	8003374 <siprintf>
 8000786:	4603      	mov	r3, r0
 8000788:	b29a      	uxth	r2, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	490f      	ldr	r1, [pc, #60]	; (80007cc <main+0x144>)
 8000790:	480f      	ldr	r0, [pc, #60]	; (80007d0 <main+0x148>)
 8000792:	f001 fff7 	bl	8002784 <HAL_UART_Transmit>
  /* USER CODE END 2 */
   setTimer0(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f000 fb3d 	bl	8000e18 <setTimer0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 800079e:	f7ff fe79 	bl	8000494 <SCH_Dispatch_Tasks>
		  if (timer0_flag == 1) {
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <main+0x15c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d1f9      	bne.n	800079e <main+0x116>
				  HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80007aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <main+0x160>)
 80007b0:	f000 ff7b 	bl	80016aa <HAL_GPIO_TogglePin>
				  setTimer0(500);
 80007b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b8:	f000 fb2e 	bl	8000e18 <setTimer0>
	  SCH_Dispatch_Tasks();
 80007bc:	e7ef      	b.n	800079e <main+0x116>
 80007be:	bf00      	nop
 80007c0:	200001c4 	.word	0x200001c4
 80007c4:	08000c61 	.word	0x08000c61
 80007c8:	08003c94 	.word	0x08003c94
 80007cc:	20000158 	.word	0x20000158
 80007d0:	2000020c 	.word	0x2000020c
 80007d4:	08000ca9 	.word	0x08000ca9
 80007d8:	08000cf1 	.word	0x08000cf1
 80007dc:	08000d39 	.word	0x08000d39
 80007e0:	08000d81 	.word	0x08000d81
 80007e4:	2000025c 	.word	0x2000025c
 80007e8:	40010800 	.word	0x40010800

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fdb2 	bl	8003364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ff72 	bl	800170c <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800082e:	f000 f8fb 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f9e0 	bl	8001c10 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000856:	f000 f8e7 	bl	8000a28 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3740      	adds	r7, #64	; 0x40
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_TIM2_Init+0x94>)
 800088a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000898:	2209      	movs	r2, #9
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008aa:	f001 fb3f 	bl	8001f2c <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b4:	f000 f8b8 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008c6:	f001 fcbd 	bl	8002244 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 f8aa 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008e2:	f001 fe95 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f89c 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200001c4 	.word	0x200001c4

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f001 fed6 	bl	80026e4 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f873 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000020c 	.word	0x2000020c
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xa0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xa0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xa0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xa0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xa0>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_GPIO_Init+0xa0>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800099a:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0xa4>)
 800099c:	f000 fe6d 	bl	800167a <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80009a0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80009a4:	60bb      	str	r3, [r7, #8]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <MX_GPIO_Init+0xa4>)
 80009ba:	f000 fccb 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_GPIO_Init+0xa8>)
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <MX_GPIO_Init+0xac>)
 80009d2:	f000 fcbf 	bl	8001354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2006      	movs	r0, #6
 80009dc:	f000 fbd1 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009e0:	2006      	movs	r0, #6
 80009e2:	f000 fbea 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	10210000 	.word	0x10210000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
		SCH_Update();
 8000a08:	f7ff fc3a 	bl	8000280 <SCH_Update>

		time_stamp++;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a14:	6013      	str	r3, [r2, #0]
		timer_run();
 8000a16:	f000 fa1b 	bl	8000e50 <timer_run>

 }
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001bc 	.word	0x200001bc

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_MspInit+0x40>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_MspInit+0x40>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_MspInit+0x40>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_MspInit+0x40>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_MspInit+0x40>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_MspInit+0x40>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a88:	d113      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	201c      	movs	r0, #28
 8000aa8:	f000 fb6b 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aac:	201c      	movs	r0, #28
 8000aae:	f000 fb84 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d137      	bne.n	8000b50 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aea:	61d3      	str	r3, [r2, #28]
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b10:	2304      	movs	r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <HAL_UART_MspInit+0xa0>)
 8000b24:	f000 fc16 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_UART_MspInit+0xa0>)
 8000b3c:	f000 fc0a 	bl	8001354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2026      	movs	r0, #38	; 0x26
 8000b46:	f000 fb1c 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b4a:	2026      	movs	r0, #38	; 0x26
 8000b4c:	f000 fb35 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f9d3 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 fd90 	bl	80016dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM2_IRQHandler+0x10>)
 8000bc6:	f001 fa4d 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001c4 	.word	0x200001c4

08000bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	f001 fe5f 	bl	800289c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000020c 	.word	0x2000020c

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fb7a 	bl	8003310 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20002800 	.word	0x20002800
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	20000254 	.word	0x20000254
 8000c50:	20000278 	.word	0x20000278

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <TASK_0>:
 *  Created on: Sep 24, 2024
 *      Author: ADMIN
 */

#include "task.h"
void TASK_0(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8000c64:	2110      	movs	r1, #16
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <TASK_0+0x34>)
 8000c68:	f000 fd1f 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 0 is dispatched at %d\r\n", time_stamp), 1000);
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <TASK_0+0x38>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	490a      	ldr	r1, [pc, #40]	; (8000c9c <TASK_0+0x3c>)
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <TASK_0+0x40>)
 8000c76:	f002 fb7d 	bl	8003374 <siprintf>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <TASK_0+0x40>)
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <TASK_0+0x44>)
 8000c86:	f001 fd7d 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f000 f97e 	bl	8000f8c <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40010800 	.word	0x40010800
 8000c98:	200001bc 	.word	0x200001bc
 8000c9c:	08003ca8 	.word	0x08003ca8
 8000ca0:	20000158 	.word	0x20000158
 8000ca4:	2000020c 	.word	0x2000020c

08000ca8 <TASK_1>:
void TASK_1(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000cac:	2120      	movs	r1, #32
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <TASK_1+0x34>)
 8000cb0:	f000 fcfb 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 1 is dispatched at %d\r\n", time_stamp), 1000);
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <TASK_1+0x38>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	490a      	ldr	r1, [pc, #40]	; (8000ce4 <TASK_1+0x3c>)
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <TASK_1+0x40>)
 8000cbe:	f002 fb59 	bl	8003374 <siprintf>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <TASK_1+0x40>)
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <TASK_1+0x44>)
 8000cce:	f001 fd59 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f000 f95a 	bl	8000f8c <HAL_Delay>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	200001bc 	.word	0x200001bc
 8000ce4:	08003cc8 	.word	0x08003cc8
 8000ce8:	20000158 	.word	0x20000158
 8000cec:	2000020c 	.word	0x2000020c

08000cf0 <TASK_2>:
void TASK_2(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <TASK_2+0x34>)
 8000cf8:	f000 fcd7 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 2 is dispatched at %d\r\n", time_stamp), 1000);
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <TASK_2+0x38>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	490a      	ldr	r1, [pc, #40]	; (8000d2c <TASK_2+0x3c>)
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <TASK_2+0x40>)
 8000d06:	f002 fb35 	bl	8003374 <siprintf>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	4907      	ldr	r1, [pc, #28]	; (8000d30 <TASK_2+0x40>)
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <TASK_2+0x44>)
 8000d16:	f001 fd35 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f000 f936 	bl	8000f8c <HAL_Delay>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010800 	.word	0x40010800
 8000d28:	200001bc 	.word	0x200001bc
 8000d2c:	08003ce8 	.word	0x08003ce8
 8000d30:	20000158 	.word	0x20000158
 8000d34:	2000020c 	.word	0x2000020c

08000d38 <TASK_3>:
void TASK_3(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <TASK_3+0x34>)
 8000d40:	f000 fcb3 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 3 is dispatched at %d\r\n", time_stamp), 1000);
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <TASK_3+0x38>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	490a      	ldr	r1, [pc, #40]	; (8000d74 <TASK_3+0x3c>)
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <TASK_3+0x40>)
 8000d4e:	f002 fb11 	bl	8003374 <siprintf>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	4907      	ldr	r1, [pc, #28]	; (8000d78 <TASK_3+0x40>)
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <TASK_3+0x44>)
 8000d5e:	f001 fd11 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000d62:	200a      	movs	r0, #10
 8000d64:	f000 f912 	bl	8000f8c <HAL_Delay>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	200001bc 	.word	0x200001bc
 8000d74:	08003d08 	.word	0x08003d08
 8000d78:	20000158 	.word	0x20000158
 8000d7c:	2000020c 	.word	0x2000020c

08000d80 <TASK_4>:
void TASK_4(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port,LED4_Pin);
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <TASK_4+0x38>)
 8000d8a:	f000 fc8e 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 4 is dispatched at %d\r\n", time_stamp), 1000);
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <TASK_4+0x3c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <TASK_4+0x40>)
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <TASK_4+0x44>)
 8000d98:	f002 faec 	bl	8003374 <siprintf>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <TASK_4+0x44>)
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <TASK_4+0x48>)
 8000da8:	f001 fcec 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f000 f8ed 	bl	8000f8c <HAL_Delay>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	200001bc 	.word	0x200001bc
 8000dc0:	08003d28 	.word	0x08003d28
 8000dc4:	20000158 	.word	0x20000158
 8000dc8:	2000020c 	.word	0x2000020c

08000dcc <TASK_5>:
void TASK_5(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port,LED5_Pin);
 8000dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <TASK_5+0x38>)
 8000dd6:	f000 fc68 	bl	80016aa <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task 5 is dispatched at %d\r\n", time_stamp), 1000);
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <TASK_5+0x3c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	490a      	ldr	r1, [pc, #40]	; (8000e0c <TASK_5+0x40>)
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <TASK_5+0x44>)
 8000de4:	f002 fac6 	bl	8003374 <siprintf>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <TASK_5+0x44>)
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <TASK_5+0x48>)
 8000df4:	f001 fcc6 	bl	8002784 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f000 f8c7 	bl	8000f8c <HAL_Delay>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010800 	.word	0x40010800
 8000e08:	200001bc 	.word	0x200001bc
 8000e0c:	08003d48 	.word	0x08003d48
 8000e10:	20000158 	.word	0x20000158
 8000e14:	2000020c 	.word	0x2000020c

08000e18 <setTimer0>:
#include "timer.h"

int timer0_counter;
unsigned char timer0_flag;

void setTimer0(int duration) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <setTimer0+0x2c>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1092      	asrs	r2, r2, #2
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <setTimer0+0x30>)
 8000e30:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <setTimer0+0x34>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667
 8000e48:	20000258 	.word	0x20000258
 8000e4c:	2000025c 	.word	0x2000025c

08000e50 <timer_run>:

void timer_run() {
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	timer0_counter--;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <timer_run+0x24>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <timer_run+0x24>)
 8000e5c:	6013      	str	r3, [r2, #0]
	if (timer0_counter <= 0) {
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <timer_run+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dc02      	bgt.n	8000e6c <timer_run+0x1c>
		timer0_flag = 1;
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <timer_run+0x28>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000258 	.word	0x20000258
 8000e78:	2000025c 	.word	0x2000025c

08000e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e7c:	f7ff feea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e82:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e98:	4c09      	ldr	r4, [pc, #36]	; (8000ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f002 fa39 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eaa:	f7ff fbed 	bl	8000688 <main>
  bx lr
 8000eae:	4770      	bx	lr
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb8:	08003dd0 	.word	0x08003dd0
  ldr r2, =_sbss
 8000ebc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ec0:	20000274 	.word	0x20000274

08000ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_2_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x28>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x28>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f947 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fda6 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f95f 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f927 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x20>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000260 	.word	0x20000260

08000f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_GetTick+0x10>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000260 	.word	0x20000260

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffe0 	bl	8000f78 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4906      	ldr	r1, [pc, #24]	; (800106c <__NVIC_EnableIRQ+0x34>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff2d 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff42 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff35 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d008      	beq.n	8001218 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2204      	movs	r2, #4
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e020      	b.n	800125a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 020e 	bic.w	r2, r2, #14
 8001226:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d005      	beq.n	8001288 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2204      	movs	r2, #4
 8001280:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e051      	b.n	800132c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 020e 	bic.w	r2, r2, #14
 8001296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a22      	ldr	r2, [pc, #136]	; (8001338 <HAL_DMA_Abort_IT+0xd4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d029      	beq.n	8001306 <HAL_DMA_Abort_IT+0xa2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_DMA_Abort_IT+0xd8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d022      	beq.n	8001302 <HAL_DMA_Abort_IT+0x9e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_DMA_Abort_IT+0xdc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01a      	beq.n	80012fc <HAL_DMA_Abort_IT+0x98>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <HAL_DMA_Abort_IT+0xe0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d012      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x92>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_DMA_Abort_IT+0xe4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00a      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x8c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <HAL_DMA_Abort_IT+0xe8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d102      	bne.n	80012ea <HAL_DMA_Abort_IT+0x86>
 80012e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012e8:	e00e      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 80012ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ee:	e00b      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 80012f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f4:	e008      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	e005      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	e002      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 8001302:	2310      	movs	r3, #16
 8001304:	e000      	b.n	8001308 <HAL_DMA_Abort_IT+0xa4>
 8001306:	2301      	movs	r3, #1
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_DMA_Abort_IT+0xec>)
 800130a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
    } 
  }
  return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020008 	.word	0x40020008
 800133c:	4002001c 	.word	0x4002001c
 8001340:	40020030 	.word	0x40020030
 8001344:	40020044 	.word	0x40020044
 8001348:	40020058 	.word	0x40020058
 800134c:	4002006c 	.word	0x4002006c
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e161      	b.n	800162c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001368:	2201      	movs	r2, #1
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8150 	bne.w	8001626 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a97      	ldr	r2, [pc, #604]	; (80015e8 <HAL_GPIO_Init+0x294>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d05e      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 8001390:	4a95      	ldr	r2, [pc, #596]	; (80015e8 <HAL_GPIO_Init+0x294>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d875      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 8001396:	4a95      	ldr	r2, [pc, #596]	; (80015ec <HAL_GPIO_Init+0x298>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d058      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 800139c:	4a93      	ldr	r2, [pc, #588]	; (80015ec <HAL_GPIO_Init+0x298>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d86f      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013a2:	4a93      	ldr	r2, [pc, #588]	; (80015f0 <HAL_GPIO_Init+0x29c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d052      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013a8:	4a91      	ldr	r2, [pc, #580]	; (80015f0 <HAL_GPIO_Init+0x29c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d869      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ae:	4a91      	ldr	r2, [pc, #580]	; (80015f4 <HAL_GPIO_Init+0x2a0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d04c      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013b4:	4a8f      	ldr	r2, [pc, #572]	; (80015f4 <HAL_GPIO_Init+0x2a0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d863      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ba:	4a8f      	ldr	r2, [pc, #572]	; (80015f8 <HAL_GPIO_Init+0x2a4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d046      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013c0:	4a8d      	ldr	r2, [pc, #564]	; (80015f8 <HAL_GPIO_Init+0x2a4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d85d      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d82a      	bhi.n	8001420 <HAL_GPIO_Init+0xcc>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d859      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <HAL_GPIO_Init+0x80>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	08001429 	.word	0x08001429
 80013dc:	0800143b 	.word	0x0800143b
 80013e0:	0800147d 	.word	0x0800147d
 80013e4:	08001483 	.word	0x08001483
 80013e8:	08001483 	.word	0x08001483
 80013ec:	08001483 	.word	0x08001483
 80013f0:	08001483 	.word	0x08001483
 80013f4:	08001483 	.word	0x08001483
 80013f8:	08001483 	.word	0x08001483
 80013fc:	08001483 	.word	0x08001483
 8001400:	08001483 	.word	0x08001483
 8001404:	08001483 	.word	0x08001483
 8001408:	08001483 	.word	0x08001483
 800140c:	08001483 	.word	0x08001483
 8001410:	08001483 	.word	0x08001483
 8001414:	08001483 	.word	0x08001483
 8001418:	08001431 	.word	0x08001431
 800141c:	08001445 	.word	0x08001445
 8001420:	4a76      	ldr	r2, [pc, #472]	; (80015fc <HAL_GPIO_Init+0x2a8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001426:	e02c      	b.n	8001482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e029      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	3304      	adds	r3, #4
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e024      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	3308      	adds	r3, #8
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e01f      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	330c      	adds	r3, #12
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e01a      	b.n	8001484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001456:	2304      	movs	r3, #4
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e013      	b.n	8001484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	611a      	str	r2, [r3, #16]
          break;
 800146e:	e009      	b.n	8001484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	615a      	str	r2, [r3, #20]
          break;
 800147a:	e003      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x130>
          break;
 8001482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d801      	bhi.n	800148e <HAL_GPIO_Init+0x13a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_Init+0x13e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d802      	bhi.n	80014a0 <HAL_GPIO_Init+0x14c>
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x152>
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3b08      	subs	r3, #8
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	210f      	movs	r1, #15
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80a9 	beq.w	8001626 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d4:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <HAL_GPIO_Init+0x2ac>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a49      	ldr	r2, [pc, #292]	; (8001600 <HAL_GPIO_Init+0x2ac>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_GPIO_Init+0x2ac>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ec:	4a45      	ldr	r2, [pc, #276]	; (8001604 <HAL_GPIO_Init+0x2b0>)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <HAL_GPIO_Init+0x2b4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1e0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3c      	ldr	r2, [pc, #240]	; (800160c <HAL_GPIO_Init+0x2b8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1dc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <HAL_GPIO_Init+0x2bc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1d8>
 8001528:	2302      	movs	r3, #2
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 800152c:	2303      	movs	r3, #3
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	; (8001604 <HAL_GPIO_Init+0x2b0>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492b      	ldr	r1, [pc, #172]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4927      	ldr	r1, [pc, #156]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4921      	ldr	r1, [pc, #132]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491d      	ldr	r1, [pc, #116]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4917      	ldr	r1, [pc, #92]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4913      	ldr	r1, [pc, #76]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01f      	beq.n	8001618 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490d      	ldr	r1, [pc, #52]	; (8001614 <HAL_GPIO_Init+0x2c0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e01f      	b.n	8001626 <HAL_GPIO_Init+0x2d2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_GPIO_Init+0x2f4>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	43db      	mvns	r3, r3
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <HAL_GPIO_Init+0x2f4>)
 8001622:	4013      	ands	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae96 	bne.w	8001368 <HAL_GPIO_Init+0x14>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	; 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e001      	b.n	800166e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168a:	787b      	ldrb	r3, [r7, #1]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001696:	e003      	b.n	80016a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	611a      	str	r2, [r3, #16]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	400b      	ands	r3, r1
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff9a 	bl	8000634 <HAL_GPIO_EXTI_Callback>
  }
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e272      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8087 	beq.w	800183a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800172c:	4b92      	ldr	r3, [pc, #584]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b04      	cmp	r3, #4
 8001736:	d00c      	beq.n	8001752 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001738:	4b8f      	ldr	r3, [pc, #572]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d112      	bne.n	800176a <HAL_RCC_OscConfig+0x5e>
 8001744:	4b8c      	ldr	r3, [pc, #560]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d10b      	bne.n	800176a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	4b89      	ldr	r3, [pc, #548]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d06c      	beq.n	8001838 <HAL_RCC_OscConfig+0x12c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d168      	bne.n	8001838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e24c      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x76>
 8001774:	4b80      	ldr	r3, [pc, #512]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a7f      	ldr	r2, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e02e      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7a      	ldr	r2, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b78      	ldr	r3, [pc, #480]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a77      	ldr	r2, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0xbc>
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a71      	ldr	r2, [pc, #452]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6e      	ldr	r2, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 80017c8:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6a      	ldr	r2, [pc, #424]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a67      	ldr	r2, [pc, #412]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbc6 	bl	8000f78 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbc2 	bl	8000f78 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e200      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0xe4>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fbb2 	bl	8000f78 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fbae 	bl	8000f78 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1ec      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x10c>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d11c      	bne.n	8001898 <HAL_RCC_OscConfig+0x18c>
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d116      	bne.n	8001898 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x176>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1c0      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4939      	ldr	r1, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	e03a      	b.n	800190e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_RCC_OscConfig+0x270>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb67 	bl	8000f78 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb63 	bl	8000f78 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1a1      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4927      	ldr	r1, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x270>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb46 	bl	8000f78 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fb42 	bl	8000f78 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e180      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03a      	beq.n	8001990 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d019      	beq.n	8001956 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff fb26 	bl	8000f78 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fb22 	bl	8000f78 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e160      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCC_OscConfig+0x26c>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f000 face 	bl	8001ef0 <RCC_Delay>
 8001954:	e01c      	b.n	8001990 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_OscConfig+0x274>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fb0c 	bl	8000f78 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001962:	e00f      	b.n	8001984 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff fb08 	bl	8000f78 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d908      	bls.n	8001984 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e146      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	42420000 	.word	0x42420000
 8001980:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e9      	bne.n	8001964 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a6 	beq.w	8001aea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10d      	bne.n	80019ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b85      	ldr	r3, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d6:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7e      	ldr	r2, [pc, #504]	; (8001bd4 <HAL_RCC_OscConfig+0x4c8>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fac9 	bl	8000f78 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff fac5 	bl	8000f78 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e103      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <HAL_RCC_OscConfig+0x4c8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x312>
 8001a10:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	e02d      	b.n	8001a7a <HAL_RCC_OscConfig+0x36e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a26:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a66      	ldr	r2, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	e01c      	b.n	8001a7a <HAL_RCC_OscConfig+0x36e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x356>
 8001a48:	4b61      	ldr	r3, [pc, #388]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a60      	ldr	r2, [pc, #384]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	4b5e      	ldr	r3, [pc, #376]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a5d      	ldr	r2, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	e00b      	b.n	8001a7a <HAL_RCC_OscConfig+0x36e>
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d015      	beq.n	8001aae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa79 	bl	8000f78 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fa75 	bl	8000f78 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0b1      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ee      	beq.n	8001a8a <HAL_RCC_OscConfig+0x37e>
 8001aac:	e014      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fa63 	bl	8000f78 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fa5f 	bl	8000f78 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e09b      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ee      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d105      	bne.n	8001aea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8087 	beq.w	8001c02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d061      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d146      	bne.n	8001b96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa33 	bl	8000f78 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fa2f 	bl	8000f78 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e06d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a19      	ldr	r1, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	430b      	orrs	r3, r1
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fa03 	bl	8000f78 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7ff f9ff 	bl	8000f78 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e03d      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46a>
 8001b94:	e035      	b.n	8001c02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_RCC_OscConfig+0x4cc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f9ec 	bl	8000f78 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f9e8 	bl	8000f78 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e026      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x498>
 8001bc2:	e01e      	b.n	8001c02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e019      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x500>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0d0      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4965      	ldr	r1, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d040      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e073      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f93a 	bl	8000f78 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f936 	bl	8000f78 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e053      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d210      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1cc>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f898 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08003d68 	.word	0x08003d68
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x30>
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x36>
 8001e12:	e027      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	613b      	str	r3, [r7, #16]
      break;
 8001e18:	e027      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0c5b      	lsrs	r3, r3, #17
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	fb03 f202 	mul.w	r2, r3, r2
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e004      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	613b      	str	r3, [r7, #16]
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e66:	613b      	str	r3, [r7, #16]
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	693b      	ldr	r3, [r7, #16]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	007a1200 	.word	0x007a1200
 8001e80:	08003d80 	.word	0x08003d80
 8001e84:	08003d90 	.word	0x08003d90
 8001e88:	003d0900 	.word	0x003d0900

08001e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea4:	f7ff fff2 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08003d78 	.word	0x08003d78

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0adb      	lsrs	r3, r3, #11
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003d78 	.word	0x08003d78

08001ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <RCC_Delay+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <RCC_Delay+0x38>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0a5b      	lsrs	r3, r3, #9
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f0c:	bf00      	nop
  }
  while (Delay --);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <RCC_Delay+0x1c>
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	20000000 	.word	0x20000000
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e041      	b.n	8001fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fd90 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f000 fa56 	bl	800241c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e035      	b.n	8002050 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_TIM_Base_Start_IT+0x90>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x4e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d004      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x4e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <HAL_TIM_Base_Start_IT+0x94>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d111      	bne.n	800203e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b06      	cmp	r3, #6
 800202a:	d010      	beq.n	800204e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203c:	e007      	b.n	800204e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40000400 	.word	0x40000400

08002064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0202 	mvn.w	r2, #2
 8002098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f998 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f98b 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f99a 	bl	80023f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0204 	mvn.w	r2, #4
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f972 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f965 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f974 	bl	80023f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0208 	mvn.w	r2, #8
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f94c 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f93f 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f94e 	bl	80023f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f926 	bl	80023e4 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f919 	bl	80023d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f928 	bl	80023f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0201 	mvn.w	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fc18 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa6f 	bl	80026d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8f8 	bl	8002408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0220 	mvn.w	r2, #32
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa42 	bl	80026c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIM_ConfigClockSource+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e0b4      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x186>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800227e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002298:	d03e      	beq.n	8002318 <HAL_TIM_ConfigClockSource+0xd4>
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	f200 8087 	bhi.w	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a6:	f000 8086 	beq.w	80023b6 <HAL_TIM_ConfigClockSource+0x172>
 80022aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ae:	d87f      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d01a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0xa6>
 80022b4:	2b70      	cmp	r3, #112	; 0x70
 80022b6:	d87b      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b60      	cmp	r3, #96	; 0x60
 80022ba:	d050      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x11a>
 80022bc:	2b60      	cmp	r3, #96	; 0x60
 80022be:	d877      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b50      	cmp	r3, #80	; 0x50
 80022c2:	d03c      	beq.n	800233e <HAL_TIM_ConfigClockSource+0xfa>
 80022c4:	2b50      	cmp	r3, #80	; 0x50
 80022c6:	d873      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d058      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x13a>
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d86f      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b30      	cmp	r3, #48	; 0x30
 80022d2:	d064      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022d4:	2b30      	cmp	r3, #48	; 0x30
 80022d6:	d86b      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d060      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d867      	bhi.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d05c      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d05a      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	e062      	b.n	80023b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f000 f96a 	bl	80025d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800230c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	609a      	str	r2, [r3, #8]
      break;
 8002316:	e04f      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f000 f953 	bl	80025d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800233a:	609a      	str	r2, [r3, #8]
      break;
 800233c:	e03c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	461a      	mov	r2, r3
 800234c:	f000 f8ca 	bl	80024e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2150      	movs	r1, #80	; 0x50
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f921 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 800235c:	e02c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	461a      	mov	r2, r3
 800236c:	f000 f8e8 	bl	8002540 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2160      	movs	r1, #96	; 0x60
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f911 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 800237c:	e01c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	f000 f8aa 	bl	80024e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f901 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 800239c:	e00c      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 f8f8 	bl	800259e <TIM_ITRx_SetConfig>
      break;
 80023ae:	e003      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e000      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
	...

0800241c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <TIM_Base_SetConfig+0xc0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <TIM_Base_SetConfig+0x28>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d003      	beq.n	8002444 <TIM_Base_SetConfig+0x28>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <TIM_Base_SetConfig+0xc4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d108      	bne.n	8002456 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <TIM_Base_SetConfig+0xc0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x52>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x52>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <TIM_Base_SetConfig+0xc4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <TIM_Base_SetConfig+0xc0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f023 0201 	bic.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
  }
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400

080024e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0201 	bic.w	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 030a 	bic.w	r3, r3, #10
 8002520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	621a      	str	r2, [r3, #32]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f023 0210 	bic.w	r2, r3, #16
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800256a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	031b      	lsls	r3, r3, #12
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800257c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	621a      	str	r2, [r3, #32]
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f043 0307 	orr.w	r3, r3, #7
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	021a      	lsls	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	609a      	str	r2, [r3, #8]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002624:	2302      	movs	r3, #2
 8002626:	e041      	b.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d004      	beq.n	8002680 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10c      	bne.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e042      	b.n	800277c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe f9d8 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	; 0x24
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fd63 	bl	80031f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800273c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800274c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d175      	bne.n	8002890 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_Transmit+0x2c>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e06e      	b.n	8002892 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2221      	movs	r2, #33	; 0x21
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fbd9 	bl	8000f78 <HAL_GetTick>
 80027c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	88fa      	ldrh	r2, [r7, #6]
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027dc:	d108      	bne.n	80027f0 <HAL_UART_Transmit+0x6c>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d104      	bne.n	80027f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	e003      	b.n	80027f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027f8:	e02e      	b.n	8002858 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fb01 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e03a      	b.n	8002892 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10b      	bne.n	800283a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	3302      	adds	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e007      	b.n	800284a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3301      	adds	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1cb      	bne.n	80027fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2140      	movs	r1, #64	; 0x40
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 facd 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e006      	b.n	8002892 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0ba      	sub	sp, #232	; 0xe8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_UART_IRQHandler+0x66>
 80028ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fbbc 	bl	8003078 <UART_Receive_IT>
      return;
 8002900:	e25b      	b.n	8002dba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80de 	beq.w	8002ac8 <HAL_UART_IRQHandler+0x22c>
 800290c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80d1 	beq.w	8002ac8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_UART_IRQHandler+0xae>
 8002932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_UART_IRQHandler+0xd2>
 8002956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_UART_IRQHandler+0xf6>
 800297a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d011      	beq.n	80029c2 <HAL_UART_IRQHandler+0x126>
 800299e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f043 0208 	orr.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 81f2 	beq.w	8002db0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_UART_IRQHandler+0x14e>
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb47 	bl	8003078 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <HAL_UART_IRQHandler+0x17a>
 8002a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d04f      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa51 	bl	8002ebe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d041      	beq.n	8002aae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1d9      	bne.n	8002a2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d013      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	4a7e      	ldr	r2, [pc, #504]	; (8002c7c <HAL_UART_IRQHandler+0x3e0>)
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fbea 	bl	8001264 <HAL_DMA_Abort_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	e00e      	b.n	8002ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f99c 	bl	8002de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aac:	e00a      	b.n	8002ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f998 	bl	8002de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	e006      	b.n	8002ac4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f994 	bl	8002de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ac2:	e175      	b.n	8002db0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	bf00      	nop
    return;
 8002ac6:	e173      	b.n	8002db0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f040 814f 	bne.w	8002d70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8148 	beq.w	8002d70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8141 	beq.w	8002d70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80b6 	beq.w	8002c80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8145 	beq.w	8002db4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b32:	429a      	cmp	r2, r3
 8002b34:	f080 813e 	bcs.w	8002db4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	f000 8088 	beq.w	8002c5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1d9      	bne.n	8002b4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3314      	adds	r3, #20
 8002b9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e1      	bne.n	8002b98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3314      	adds	r3, #20
 8002bf4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bf8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c00:	e841 2300 	strex	r3, r2, [r1]
 8002c04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e3      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	f023 0310 	bic.w	r3, r3, #16
 8002c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e3      	bne.n	8002c1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fac9 	bl	80011ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8bf 	bl	8002df6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c78:	e09c      	b.n	8002db4 <HAL_UART_IRQHandler+0x518>
 8002c7a:	bf00      	nop
 8002c7c:	08002f83 	.word	0x08002f83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 808e 	beq.w	8002db8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8089 	beq.w	8002db8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cca:	647a      	str	r2, [r7, #68]	; 0x44
 8002ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e3      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	623b      	str	r3, [r7, #32]
   return(result);
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3314      	adds	r3, #20
 8002cfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d02:	633a      	str	r2, [r7, #48]	; 0x30
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e3      	bne.n	8002cde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0310 	bic.w	r3, r3, #16
 8002d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d48:	61fa      	str	r2, [r7, #28]
 8002d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	69b9      	ldr	r1, [r7, #24]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	617b      	str	r3, [r7, #20]
   return(result);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e3      	bne.n	8002d24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f844 	bl	8002df6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d6e:	e023      	b.n	8002db8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_UART_IRQHandler+0x4f4>
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f90e 	bl	8002faa <UART_Transmit_IT>
    return;
 8002d8e:	e014      	b.n	8002dba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <HAL_UART_IRQHandler+0x51e>
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f94d 	bl	8003048 <UART_EndTransmit_IT>
    return;
 8002dae:	e004      	b.n	8002dba <HAL_UART_IRQHandler+0x51e>
    return;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <HAL_UART_IRQHandler+0x51e>
      return;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <HAL_UART_IRQHandler+0x51e>
      return;
 8002db8:	bf00      	nop
  }
}
 8002dba:	37e8      	adds	r7, #232	; 0xe8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e03b      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d037      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe f8a7 	bl	8000f78 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e03a      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d023      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d020      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d01d      	beq.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d116      	bne.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f81d 	bl	8002ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2208      	movs	r2, #8
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d0b4      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b095      	sub	sp, #84	; 0x54
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee6:	643a      	str	r2, [r7, #64]	; 0x40
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e5      	bne.n	8002ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3314      	adds	r3, #20
 8002f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e5      	bne.n	8002efa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d119      	bne.n	8002f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f56:	61ba      	str	r2, [r7, #24]
 8002f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	613b      	str	r3, [r7, #16]
   return(result);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f78:	bf00      	nop
 8002f7a:	3754      	adds	r7, #84	; 0x54
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff21 	bl	8002de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d13e      	bne.n	800303c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d114      	bne.n	8002ff2 <UART_Transmit_IT+0x48>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d110      	bne.n	8002ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	1c9a      	adds	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	621a      	str	r2, [r3, #32]
 8002ff0:	e008      	b.n	8003004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6211      	str	r1, [r2, #32]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4619      	mov	r1, r3
 8003012:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff fea9 	bl	8002dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b22      	cmp	r3, #34	; 0x22
 800308a:	f040 80ae 	bne.w	80031ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d117      	bne.n	80030c8 <UART_Receive_IT+0x50>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	1c9a      	adds	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
 80030c6:	e026      	b.n	8003116 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	d007      	beq.n	80030ec <UART_Receive_IT+0x74>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <UART_Receive_IT+0x82>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e008      	b.n	800310c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003106:	b2da      	uxtb	r2, r3
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4619      	mov	r1, r3
 8003124:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15d      	bne.n	80031e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0220 	bic.w	r2, r2, #32
 8003138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003148:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	2b01      	cmp	r3, #1
 800316e:	d135      	bne.n	80031dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	613b      	str	r3, [r7, #16]
   return(result);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	623a      	str	r2, [r7, #32]
 8003198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d10a      	bne.n	80031ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fe0e 	bl	8002df6 <HAL_UARTEx_RxEventCallback>
 80031da:	e002      	b.n	80031e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fdf8 	bl	8002dd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e002      	b.n	80031ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3730      	adds	r7, #48	; 0x30
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800322e:	f023 030c 	bic.w	r3, r3, #12
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	430b      	orrs	r3, r1
 800323a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <UART_SetConfig+0x114>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7fe fe34 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	e002      	b.n	800326a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe fe1c 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009a      	lsls	r2, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <UART_SetConfig+0x118>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	0119      	lsls	r1, r3, #4
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	4419      	add	r1, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <UART_SetConfig+0x118>)
 80032da:	fba3 0302 	umull	r0, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2064      	movs	r0, #100	; 0x64
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <UART_SetConfig+0x118>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	440a      	add	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40013800 	.word	0x40013800
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <__errno>:
 8003310:	4b01      	ldr	r3, [pc, #4]	; (8003318 <__errno+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	2600      	movs	r6, #0
 8003320:	4d0c      	ldr	r5, [pc, #48]	; (8003354 <__libc_init_array+0x38>)
 8003322:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	f000 fc9c 	bl	8003c68 <_init>
 8003330:	2600      	movs	r6, #0
 8003332:	4d0a      	ldr	r5, [pc, #40]	; (800335c <__libc_init_array+0x40>)
 8003334:	4c0a      	ldr	r4, [pc, #40]	; (8003360 <__libc_init_array+0x44>)
 8003336:	1b64      	subs	r4, r4, r5
 8003338:	10a4      	asrs	r4, r4, #2
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	08003dc8 	.word	0x08003dc8
 8003358:	08003dc8 	.word	0x08003dc8
 800335c:	08003dc8 	.word	0x08003dc8
 8003360:	08003dcc 	.word	0x08003dcc

08003364 <memset>:
 8003364:	4603      	mov	r3, r0
 8003366:	4402      	add	r2, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <siprintf>:
 8003374:	b40e      	push	{r1, r2, r3}
 8003376:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800337a:	b500      	push	{lr}
 800337c:	b09c      	sub	sp, #112	; 0x70
 800337e:	ab1d      	add	r3, sp, #116	; 0x74
 8003380:	9002      	str	r0, [sp, #8]
 8003382:	9006      	str	r0, [sp, #24]
 8003384:	9107      	str	r1, [sp, #28]
 8003386:	9104      	str	r1, [sp, #16]
 8003388:	4808      	ldr	r0, [pc, #32]	; (80033ac <siprintf+0x38>)
 800338a:	4909      	ldr	r1, [pc, #36]	; (80033b0 <siprintf+0x3c>)
 800338c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003390:	9105      	str	r1, [sp, #20]
 8003392:	6800      	ldr	r0, [r0, #0]
 8003394:	a902      	add	r1, sp, #8
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f000 f868 	bl	800346c <_svfiprintf_r>
 800339c:	2200      	movs	r2, #0
 800339e:	9b02      	ldr	r3, [sp, #8]
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	b01c      	add	sp, #112	; 0x70
 80033a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a8:	b003      	add	sp, #12
 80033aa:	4770      	bx	lr
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	ffff0208 	.word	0xffff0208

080033b4 <__ssputs_r>:
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	688e      	ldr	r6, [r1, #8]
 80033ba:	4682      	mov	sl, r0
 80033bc:	429e      	cmp	r6, r3
 80033be:	460c      	mov	r4, r1
 80033c0:	4690      	mov	r8, r2
 80033c2:	461f      	mov	r7, r3
 80033c4:	d838      	bhi.n	8003438 <__ssputs_r+0x84>
 80033c6:	898a      	ldrh	r2, [r1, #12]
 80033c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033cc:	d032      	beq.n	8003434 <__ssputs_r+0x80>
 80033ce:	6825      	ldr	r5, [r4, #0]
 80033d0:	6909      	ldr	r1, [r1, #16]
 80033d2:	3301      	adds	r3, #1
 80033d4:	eba5 0901 	sub.w	r9, r5, r1
 80033d8:	6965      	ldr	r5, [r4, #20]
 80033da:	444b      	add	r3, r9
 80033dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033e4:	106d      	asrs	r5, r5, #1
 80033e6:	429d      	cmp	r5, r3
 80033e8:	bf38      	it	cc
 80033ea:	461d      	movcc	r5, r3
 80033ec:	0553      	lsls	r3, r2, #21
 80033ee:	d531      	bpl.n	8003454 <__ssputs_r+0xa0>
 80033f0:	4629      	mov	r1, r5
 80033f2:	f000 fb6f 	bl	8003ad4 <_malloc_r>
 80033f6:	4606      	mov	r6, r0
 80033f8:	b950      	cbnz	r0, 8003410 <__ssputs_r+0x5c>
 80033fa:	230c      	movs	r3, #12
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f8ca 3000 	str.w	r3, [sl]
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	464a      	mov	r2, r9
 8003412:	6921      	ldr	r1, [r4, #16]
 8003414:	f000 face 	bl	80039b4 <memcpy>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	6126      	str	r6, [r4, #16]
 8003426:	444e      	add	r6, r9
 8003428:	6026      	str	r6, [r4, #0]
 800342a:	463e      	mov	r6, r7
 800342c:	6165      	str	r5, [r4, #20]
 800342e:	eba5 0509 	sub.w	r5, r5, r9
 8003432:	60a5      	str	r5, [r4, #8]
 8003434:	42be      	cmp	r6, r7
 8003436:	d900      	bls.n	800343a <__ssputs_r+0x86>
 8003438:	463e      	mov	r6, r7
 800343a:	4632      	mov	r2, r6
 800343c:	4641      	mov	r1, r8
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	f000 fac6 	bl	80039d0 <memmove>
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	2000      	movs	r0, #0
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	60a3      	str	r3, [r4, #8]
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	4433      	add	r3, r6
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	e7db      	b.n	800340c <__ssputs_r+0x58>
 8003454:	462a      	mov	r2, r5
 8003456:	f000 fbb1 	bl	8003bbc <_realloc_r>
 800345a:	4606      	mov	r6, r0
 800345c:	2800      	cmp	r0, #0
 800345e:	d1e1      	bne.n	8003424 <__ssputs_r+0x70>
 8003460:	4650      	mov	r0, sl
 8003462:	6921      	ldr	r1, [r4, #16]
 8003464:	f000 face 	bl	8003a04 <_free_r>
 8003468:	e7c7      	b.n	80033fa <__ssputs_r+0x46>
	...

0800346c <_svfiprintf_r>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	4698      	mov	r8, r3
 8003472:	898b      	ldrh	r3, [r1, #12]
 8003474:	4607      	mov	r7, r0
 8003476:	061b      	lsls	r3, r3, #24
 8003478:	460d      	mov	r5, r1
 800347a:	4614      	mov	r4, r2
 800347c:	b09d      	sub	sp, #116	; 0x74
 800347e:	d50e      	bpl.n	800349e <_svfiprintf_r+0x32>
 8003480:	690b      	ldr	r3, [r1, #16]
 8003482:	b963      	cbnz	r3, 800349e <_svfiprintf_r+0x32>
 8003484:	2140      	movs	r1, #64	; 0x40
 8003486:	f000 fb25 	bl	8003ad4 <_malloc_r>
 800348a:	6028      	str	r0, [r5, #0]
 800348c:	6128      	str	r0, [r5, #16]
 800348e:	b920      	cbnz	r0, 800349a <_svfiprintf_r+0x2e>
 8003490:	230c      	movs	r3, #12
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e0d1      	b.n	800363e <_svfiprintf_r+0x1d2>
 800349a:	2340      	movs	r3, #64	; 0x40
 800349c:	616b      	str	r3, [r5, #20]
 800349e:	2300      	movs	r3, #0
 80034a0:	9309      	str	r3, [sp, #36]	; 0x24
 80034a2:	2320      	movs	r3, #32
 80034a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034a8:	2330      	movs	r3, #48	; 0x30
 80034aa:	f04f 0901 	mov.w	r9, #1
 80034ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80034b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003658 <_svfiprintf_r+0x1ec>
 80034b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ba:	4623      	mov	r3, r4
 80034bc:	469a      	mov	sl, r3
 80034be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034c2:	b10a      	cbz	r2, 80034c8 <_svfiprintf_r+0x5c>
 80034c4:	2a25      	cmp	r2, #37	; 0x25
 80034c6:	d1f9      	bne.n	80034bc <_svfiprintf_r+0x50>
 80034c8:	ebba 0b04 	subs.w	fp, sl, r4
 80034cc:	d00b      	beq.n	80034e6 <_svfiprintf_r+0x7a>
 80034ce:	465b      	mov	r3, fp
 80034d0:	4622      	mov	r2, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	f7ff ff6d 	bl	80033b4 <__ssputs_r>
 80034da:	3001      	adds	r0, #1
 80034dc:	f000 80aa 	beq.w	8003634 <_svfiprintf_r+0x1c8>
 80034e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e2:	445a      	add	r2, fp
 80034e4:	9209      	str	r2, [sp, #36]	; 0x24
 80034e6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80a2 	beq.w	8003634 <_svfiprintf_r+0x1c8>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034fa:	f10a 0a01 	add.w	sl, sl, #1
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	9307      	str	r3, [sp, #28]
 8003502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003506:	931a      	str	r3, [sp, #104]	; 0x68
 8003508:	4654      	mov	r4, sl
 800350a:	2205      	movs	r2, #5
 800350c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003510:	4851      	ldr	r0, [pc, #324]	; (8003658 <_svfiprintf_r+0x1ec>)
 8003512:	f000 fa41 	bl	8003998 <memchr>
 8003516:	9a04      	ldr	r2, [sp, #16]
 8003518:	b9d8      	cbnz	r0, 8003552 <_svfiprintf_r+0xe6>
 800351a:	06d0      	lsls	r0, r2, #27
 800351c:	bf44      	itt	mi
 800351e:	2320      	movmi	r3, #32
 8003520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003524:	0711      	lsls	r1, r2, #28
 8003526:	bf44      	itt	mi
 8003528:	232b      	movmi	r3, #43	; 0x2b
 800352a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800352e:	f89a 3000 	ldrb.w	r3, [sl]
 8003532:	2b2a      	cmp	r3, #42	; 0x2a
 8003534:	d015      	beq.n	8003562 <_svfiprintf_r+0xf6>
 8003536:	4654      	mov	r4, sl
 8003538:	2000      	movs	r0, #0
 800353a:	f04f 0c0a 	mov.w	ip, #10
 800353e:	9a07      	ldr	r2, [sp, #28]
 8003540:	4621      	mov	r1, r4
 8003542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003546:	3b30      	subs	r3, #48	; 0x30
 8003548:	2b09      	cmp	r3, #9
 800354a:	d94e      	bls.n	80035ea <_svfiprintf_r+0x17e>
 800354c:	b1b0      	cbz	r0, 800357c <_svfiprintf_r+0x110>
 800354e:	9207      	str	r2, [sp, #28]
 8003550:	e014      	b.n	800357c <_svfiprintf_r+0x110>
 8003552:	eba0 0308 	sub.w	r3, r0, r8
 8003556:	fa09 f303 	lsl.w	r3, r9, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	46a2      	mov	sl, r4
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	e7d2      	b.n	8003508 <_svfiprintf_r+0x9c>
 8003562:	9b03      	ldr	r3, [sp, #12]
 8003564:	1d19      	adds	r1, r3, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9103      	str	r1, [sp, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfbb      	ittet	lt
 800356e:	425b      	neglt	r3, r3
 8003570:	f042 0202 	orrlt.w	r2, r2, #2
 8003574:	9307      	strge	r3, [sp, #28]
 8003576:	9307      	strlt	r3, [sp, #28]
 8003578:	bfb8      	it	lt
 800357a:	9204      	strlt	r2, [sp, #16]
 800357c:	7823      	ldrb	r3, [r4, #0]
 800357e:	2b2e      	cmp	r3, #46	; 0x2e
 8003580:	d10c      	bne.n	800359c <_svfiprintf_r+0x130>
 8003582:	7863      	ldrb	r3, [r4, #1]
 8003584:	2b2a      	cmp	r3, #42	; 0x2a
 8003586:	d135      	bne.n	80035f4 <_svfiprintf_r+0x188>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	3402      	adds	r4, #2
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	9203      	str	r2, [sp, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	bfb8      	it	lt
 8003596:	f04f 33ff 	movlt.w	r3, #4294967295
 800359a:	9305      	str	r3, [sp, #20]
 800359c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800365c <_svfiprintf_r+0x1f0>
 80035a0:	2203      	movs	r2, #3
 80035a2:	4650      	mov	r0, sl
 80035a4:	7821      	ldrb	r1, [r4, #0]
 80035a6:	f000 f9f7 	bl	8003998 <memchr>
 80035aa:	b140      	cbz	r0, 80035be <_svfiprintf_r+0x152>
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	eba0 000a 	sub.w	r0, r0, sl
 80035b2:	fa03 f000 	lsl.w	r0, r3, r0
 80035b6:	9b04      	ldr	r3, [sp, #16]
 80035b8:	3401      	adds	r4, #1
 80035ba:	4303      	orrs	r3, r0
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c2:	2206      	movs	r2, #6
 80035c4:	4826      	ldr	r0, [pc, #152]	; (8003660 <_svfiprintf_r+0x1f4>)
 80035c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ca:	f000 f9e5 	bl	8003998 <memchr>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d038      	beq.n	8003644 <_svfiprintf_r+0x1d8>
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <_svfiprintf_r+0x1f8>)
 80035d4:	bb1b      	cbnz	r3, 800361e <_svfiprintf_r+0x1b2>
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	3307      	adds	r3, #7
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	3308      	adds	r3, #8
 80035e0:	9303      	str	r3, [sp, #12]
 80035e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e4:	4433      	add	r3, r6
 80035e6:	9309      	str	r3, [sp, #36]	; 0x24
 80035e8:	e767      	b.n	80034ba <_svfiprintf_r+0x4e>
 80035ea:	460c      	mov	r4, r1
 80035ec:	2001      	movs	r0, #1
 80035ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80035f2:	e7a5      	b.n	8003540 <_svfiprintf_r+0xd4>
 80035f4:	2300      	movs	r3, #0
 80035f6:	f04f 0c0a 	mov.w	ip, #10
 80035fa:	4619      	mov	r1, r3
 80035fc:	3401      	adds	r4, #1
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	4620      	mov	r0, r4
 8003602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003606:	3a30      	subs	r2, #48	; 0x30
 8003608:	2a09      	cmp	r2, #9
 800360a:	d903      	bls.n	8003614 <_svfiprintf_r+0x1a8>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0c5      	beq.n	800359c <_svfiprintf_r+0x130>
 8003610:	9105      	str	r1, [sp, #20]
 8003612:	e7c3      	b.n	800359c <_svfiprintf_r+0x130>
 8003614:	4604      	mov	r4, r0
 8003616:	2301      	movs	r3, #1
 8003618:	fb0c 2101 	mla	r1, ip, r1, r2
 800361c:	e7f0      	b.n	8003600 <_svfiprintf_r+0x194>
 800361e:	ab03      	add	r3, sp, #12
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462a      	mov	r2, r5
 8003624:	4638      	mov	r0, r7
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_svfiprintf_r+0x1fc>)
 8003628:	a904      	add	r1, sp, #16
 800362a:	f3af 8000 	nop.w
 800362e:	1c42      	adds	r2, r0, #1
 8003630:	4606      	mov	r6, r0
 8003632:	d1d6      	bne.n	80035e2 <_svfiprintf_r+0x176>
 8003634:	89ab      	ldrh	r3, [r5, #12]
 8003636:	065b      	lsls	r3, r3, #25
 8003638:	f53f af2c 	bmi.w	8003494 <_svfiprintf_r+0x28>
 800363c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800363e:	b01d      	add	sp, #116	; 0x74
 8003640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003644:	ab03      	add	r3, sp, #12
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	462a      	mov	r2, r5
 800364a:	4638      	mov	r0, r7
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <_svfiprintf_r+0x1fc>)
 800364e:	a904      	add	r1, sp, #16
 8003650:	f000 f87c 	bl	800374c <_printf_i>
 8003654:	e7eb      	b.n	800362e <_svfiprintf_r+0x1c2>
 8003656:	bf00      	nop
 8003658:	08003d92 	.word	0x08003d92
 800365c:	08003d98 	.word	0x08003d98
 8003660:	08003d9c 	.word	0x08003d9c
 8003664:	00000000 	.word	0x00000000
 8003668:	080033b5 	.word	0x080033b5

0800366c <_printf_common>:
 800366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	4616      	mov	r6, r2
 8003672:	4699      	mov	r9, r3
 8003674:	688a      	ldr	r2, [r1, #8]
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	4607      	mov	r7, r0
 800367a:	4293      	cmp	r3, r2
 800367c:	bfb8      	it	lt
 800367e:	4613      	movlt	r3, r2
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003686:	460c      	mov	r4, r1
 8003688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800368c:	b10a      	cbz	r2, 8003692 <_printf_common+0x26>
 800368e:	3301      	adds	r3, #1
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	0699      	lsls	r1, r3, #26
 8003696:	bf42      	ittt	mi
 8003698:	6833      	ldrmi	r3, [r6, #0]
 800369a:	3302      	addmi	r3, #2
 800369c:	6033      	strmi	r3, [r6, #0]
 800369e:	6825      	ldr	r5, [r4, #0]
 80036a0:	f015 0506 	ands.w	r5, r5, #6
 80036a4:	d106      	bne.n	80036b4 <_printf_common+0x48>
 80036a6:	f104 0a19 	add.w	sl, r4, #25
 80036aa:	68e3      	ldr	r3, [r4, #12]
 80036ac:	6832      	ldr	r2, [r6, #0]
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	42ab      	cmp	r3, r5
 80036b2:	dc28      	bgt.n	8003706 <_printf_common+0x9a>
 80036b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036b8:	1e13      	subs	r3, r2, #0
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	bf18      	it	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	0692      	lsls	r2, r2, #26
 80036c2:	d42d      	bmi.n	8003720 <_printf_common+0xb4>
 80036c4:	4649      	mov	r1, r9
 80036c6:	4638      	mov	r0, r7
 80036c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036cc:	47c0      	blx	r8
 80036ce:	3001      	adds	r0, #1
 80036d0:	d020      	beq.n	8003714 <_printf_common+0xa8>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	68e5      	ldr	r5, [r4, #12]
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf18      	it	ne
 80036de:	2500      	movne	r5, #0
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	f04f 0600 	mov.w	r6, #0
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	bf08      	it	eq
 80036ea:	1aad      	subeq	r5, r5, r2
 80036ec:	6922      	ldr	r2, [r4, #16]
 80036ee:	bf08      	it	eq
 80036f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bfc4      	itt	gt
 80036f8:	1a9b      	subgt	r3, r3, r2
 80036fa:	18ed      	addgt	r5, r5, r3
 80036fc:	341a      	adds	r4, #26
 80036fe:	42b5      	cmp	r5, r6
 8003700:	d11a      	bne.n	8003738 <_printf_common+0xcc>
 8003702:	2000      	movs	r0, #0
 8003704:	e008      	b.n	8003718 <_printf_common+0xac>
 8003706:	2301      	movs	r3, #1
 8003708:	4652      	mov	r2, sl
 800370a:	4649      	mov	r1, r9
 800370c:	4638      	mov	r0, r7
 800370e:	47c0      	blx	r8
 8003710:	3001      	adds	r0, #1
 8003712:	d103      	bne.n	800371c <_printf_common+0xb0>
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371c:	3501      	adds	r5, #1
 800371e:	e7c4      	b.n	80036aa <_printf_common+0x3e>
 8003720:	2030      	movs	r0, #48	; 0x30
 8003722:	18e1      	adds	r1, r4, r3
 8003724:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800372e:	4422      	add	r2, r4
 8003730:	3302      	adds	r3, #2
 8003732:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003736:	e7c5      	b.n	80036c4 <_printf_common+0x58>
 8003738:	2301      	movs	r3, #1
 800373a:	4622      	mov	r2, r4
 800373c:	4649      	mov	r1, r9
 800373e:	4638      	mov	r0, r7
 8003740:	47c0      	blx	r8
 8003742:	3001      	adds	r0, #1
 8003744:	d0e6      	beq.n	8003714 <_printf_common+0xa8>
 8003746:	3601      	adds	r6, #1
 8003748:	e7d9      	b.n	80036fe <_printf_common+0x92>
	...

0800374c <_printf_i>:
 800374c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	7e0f      	ldrb	r7, [r1, #24]
 8003752:	4691      	mov	r9, r2
 8003754:	2f78      	cmp	r7, #120	; 0x78
 8003756:	4680      	mov	r8, r0
 8003758:	460c      	mov	r4, r1
 800375a:	469a      	mov	sl, r3
 800375c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800375e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003762:	d807      	bhi.n	8003774 <_printf_i+0x28>
 8003764:	2f62      	cmp	r7, #98	; 0x62
 8003766:	d80a      	bhi.n	800377e <_printf_i+0x32>
 8003768:	2f00      	cmp	r7, #0
 800376a:	f000 80d9 	beq.w	8003920 <_printf_i+0x1d4>
 800376e:	2f58      	cmp	r7, #88	; 0x58
 8003770:	f000 80a4 	beq.w	80038bc <_printf_i+0x170>
 8003774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800377c:	e03a      	b.n	80037f4 <_printf_i+0xa8>
 800377e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003782:	2b15      	cmp	r3, #21
 8003784:	d8f6      	bhi.n	8003774 <_printf_i+0x28>
 8003786:	a101      	add	r1, pc, #4	; (adr r1, 800378c <_printf_i+0x40>)
 8003788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800378c:	080037e5 	.word	0x080037e5
 8003790:	080037f9 	.word	0x080037f9
 8003794:	08003775 	.word	0x08003775
 8003798:	08003775 	.word	0x08003775
 800379c:	08003775 	.word	0x08003775
 80037a0:	08003775 	.word	0x08003775
 80037a4:	080037f9 	.word	0x080037f9
 80037a8:	08003775 	.word	0x08003775
 80037ac:	08003775 	.word	0x08003775
 80037b0:	08003775 	.word	0x08003775
 80037b4:	08003775 	.word	0x08003775
 80037b8:	08003907 	.word	0x08003907
 80037bc:	08003829 	.word	0x08003829
 80037c0:	080038e9 	.word	0x080038e9
 80037c4:	08003775 	.word	0x08003775
 80037c8:	08003775 	.word	0x08003775
 80037cc:	08003929 	.word	0x08003929
 80037d0:	08003775 	.word	0x08003775
 80037d4:	08003829 	.word	0x08003829
 80037d8:	08003775 	.word	0x08003775
 80037dc:	08003775 	.word	0x08003775
 80037e0:	080038f1 	.word	0x080038f1
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0a4      	b.n	8003942 <_printf_i+0x1f6>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	6829      	ldr	r1, [r5, #0]
 80037fc:	0606      	lsls	r6, r0, #24
 80037fe:	f101 0304 	add.w	r3, r1, #4
 8003802:	d50a      	bpl.n	800381a <_printf_i+0xce>
 8003804:	680e      	ldr	r6, [r1, #0]
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	2e00      	cmp	r6, #0
 800380a:	da03      	bge.n	8003814 <_printf_i+0xc8>
 800380c:	232d      	movs	r3, #45	; 0x2d
 800380e:	4276      	negs	r6, r6
 8003810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003814:	230a      	movs	r3, #10
 8003816:	485e      	ldr	r0, [pc, #376]	; (8003990 <_printf_i+0x244>)
 8003818:	e019      	b.n	800384e <_printf_i+0x102>
 800381a:	680e      	ldr	r6, [r1, #0]
 800381c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003820:	602b      	str	r3, [r5, #0]
 8003822:	bf18      	it	ne
 8003824:	b236      	sxthne	r6, r6
 8003826:	e7ef      	b.n	8003808 <_printf_i+0xbc>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	1d19      	adds	r1, r3, #4
 800382e:	6029      	str	r1, [r5, #0]
 8003830:	0601      	lsls	r1, r0, #24
 8003832:	d501      	bpl.n	8003838 <_printf_i+0xec>
 8003834:	681e      	ldr	r6, [r3, #0]
 8003836:	e002      	b.n	800383e <_printf_i+0xf2>
 8003838:	0646      	lsls	r6, r0, #25
 800383a:	d5fb      	bpl.n	8003834 <_printf_i+0xe8>
 800383c:	881e      	ldrh	r6, [r3, #0]
 800383e:	2f6f      	cmp	r7, #111	; 0x6f
 8003840:	bf0c      	ite	eq
 8003842:	2308      	moveq	r3, #8
 8003844:	230a      	movne	r3, #10
 8003846:	4852      	ldr	r0, [pc, #328]	; (8003990 <_printf_i+0x244>)
 8003848:	2100      	movs	r1, #0
 800384a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800384e:	6865      	ldr	r5, [r4, #4]
 8003850:	2d00      	cmp	r5, #0
 8003852:	bfa8      	it	ge
 8003854:	6821      	ldrge	r1, [r4, #0]
 8003856:	60a5      	str	r5, [r4, #8]
 8003858:	bfa4      	itt	ge
 800385a:	f021 0104 	bicge.w	r1, r1, #4
 800385e:	6021      	strge	r1, [r4, #0]
 8003860:	b90e      	cbnz	r6, 8003866 <_printf_i+0x11a>
 8003862:	2d00      	cmp	r5, #0
 8003864:	d04d      	beq.n	8003902 <_printf_i+0x1b6>
 8003866:	4615      	mov	r5, r2
 8003868:	fbb6 f1f3 	udiv	r1, r6, r3
 800386c:	fb03 6711 	mls	r7, r3, r1, r6
 8003870:	5dc7      	ldrb	r7, [r0, r7]
 8003872:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003876:	4637      	mov	r7, r6
 8003878:	42bb      	cmp	r3, r7
 800387a:	460e      	mov	r6, r1
 800387c:	d9f4      	bls.n	8003868 <_printf_i+0x11c>
 800387e:	2b08      	cmp	r3, #8
 8003880:	d10b      	bne.n	800389a <_printf_i+0x14e>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	07de      	lsls	r6, r3, #31
 8003886:	d508      	bpl.n	800389a <_printf_i+0x14e>
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	6861      	ldr	r1, [r4, #4]
 800388c:	4299      	cmp	r1, r3
 800388e:	bfde      	ittt	le
 8003890:	2330      	movle	r3, #48	; 0x30
 8003892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800389a:	1b52      	subs	r2, r2, r5
 800389c:	6122      	str	r2, [r4, #16]
 800389e:	464b      	mov	r3, r9
 80038a0:	4621      	mov	r1, r4
 80038a2:	4640      	mov	r0, r8
 80038a4:	f8cd a000 	str.w	sl, [sp]
 80038a8:	aa03      	add	r2, sp, #12
 80038aa:	f7ff fedf 	bl	800366c <_printf_common>
 80038ae:	3001      	adds	r0, #1
 80038b0:	d14c      	bne.n	800394c <_printf_i+0x200>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	b004      	add	sp, #16
 80038b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038bc:	4834      	ldr	r0, [pc, #208]	; (8003990 <_printf_i+0x244>)
 80038be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038c2:	6829      	ldr	r1, [r5, #0]
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ca:	6029      	str	r1, [r5, #0]
 80038cc:	061d      	lsls	r5, r3, #24
 80038ce:	d514      	bpl.n	80038fa <_printf_i+0x1ae>
 80038d0:	07df      	lsls	r7, r3, #31
 80038d2:	bf44      	itt	mi
 80038d4:	f043 0320 	orrmi.w	r3, r3, #32
 80038d8:	6023      	strmi	r3, [r4, #0]
 80038da:	b91e      	cbnz	r6, 80038e4 <_printf_i+0x198>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	f023 0320 	bic.w	r3, r3, #32
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	2310      	movs	r3, #16
 80038e6:	e7af      	b.n	8003848 <_printf_i+0xfc>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f043 0320 	orr.w	r3, r3, #32
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	2378      	movs	r3, #120	; 0x78
 80038f2:	4828      	ldr	r0, [pc, #160]	; (8003994 <_printf_i+0x248>)
 80038f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038f8:	e7e3      	b.n	80038c2 <_printf_i+0x176>
 80038fa:	0659      	lsls	r1, r3, #25
 80038fc:	bf48      	it	mi
 80038fe:	b2b6      	uxthmi	r6, r6
 8003900:	e7e6      	b.n	80038d0 <_printf_i+0x184>
 8003902:	4615      	mov	r5, r2
 8003904:	e7bb      	b.n	800387e <_printf_i+0x132>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	6826      	ldr	r6, [r4, #0]
 800390a:	1d18      	adds	r0, r3, #4
 800390c:	6961      	ldr	r1, [r4, #20]
 800390e:	6028      	str	r0, [r5, #0]
 8003910:	0635      	lsls	r5, r6, #24
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	d501      	bpl.n	800391a <_printf_i+0x1ce>
 8003916:	6019      	str	r1, [r3, #0]
 8003918:	e002      	b.n	8003920 <_printf_i+0x1d4>
 800391a:	0670      	lsls	r0, r6, #25
 800391c:	d5fb      	bpl.n	8003916 <_printf_i+0x1ca>
 800391e:	8019      	strh	r1, [r3, #0]
 8003920:	2300      	movs	r3, #0
 8003922:	4615      	mov	r5, r2
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	e7ba      	b.n	800389e <_printf_i+0x152>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	2100      	movs	r1, #0
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	602a      	str	r2, [r5, #0]
 8003930:	681d      	ldr	r5, [r3, #0]
 8003932:	6862      	ldr	r2, [r4, #4]
 8003934:	4628      	mov	r0, r5
 8003936:	f000 f82f 	bl	8003998 <memchr>
 800393a:	b108      	cbz	r0, 8003940 <_printf_i+0x1f4>
 800393c:	1b40      	subs	r0, r0, r5
 800393e:	6060      	str	r0, [r4, #4]
 8003940:	6863      	ldr	r3, [r4, #4]
 8003942:	6123      	str	r3, [r4, #16]
 8003944:	2300      	movs	r3, #0
 8003946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800394a:	e7a8      	b.n	800389e <_printf_i+0x152>
 800394c:	462a      	mov	r2, r5
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	47d0      	blx	sl
 8003956:	3001      	adds	r0, #1
 8003958:	d0ab      	beq.n	80038b2 <_printf_i+0x166>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	079b      	lsls	r3, r3, #30
 800395e:	d413      	bmi.n	8003988 <_printf_i+0x23c>
 8003960:	68e0      	ldr	r0, [r4, #12]
 8003962:	9b03      	ldr	r3, [sp, #12]
 8003964:	4298      	cmp	r0, r3
 8003966:	bfb8      	it	lt
 8003968:	4618      	movlt	r0, r3
 800396a:	e7a4      	b.n	80038b6 <_printf_i+0x16a>
 800396c:	2301      	movs	r3, #1
 800396e:	4632      	mov	r2, r6
 8003970:	4649      	mov	r1, r9
 8003972:	4640      	mov	r0, r8
 8003974:	47d0      	blx	sl
 8003976:	3001      	adds	r0, #1
 8003978:	d09b      	beq.n	80038b2 <_printf_i+0x166>
 800397a:	3501      	adds	r5, #1
 800397c:	68e3      	ldr	r3, [r4, #12]
 800397e:	9903      	ldr	r1, [sp, #12]
 8003980:	1a5b      	subs	r3, r3, r1
 8003982:	42ab      	cmp	r3, r5
 8003984:	dcf2      	bgt.n	800396c <_printf_i+0x220>
 8003986:	e7eb      	b.n	8003960 <_printf_i+0x214>
 8003988:	2500      	movs	r5, #0
 800398a:	f104 0619 	add.w	r6, r4, #25
 800398e:	e7f5      	b.n	800397c <_printf_i+0x230>
 8003990:	08003da3 	.word	0x08003da3
 8003994:	08003db4 	.word	0x08003db4

08003998 <memchr>:
 8003998:	4603      	mov	r3, r0
 800399a:	b510      	push	{r4, lr}
 800399c:	b2c9      	uxtb	r1, r1
 800399e:	4402      	add	r2, r0
 80039a0:	4293      	cmp	r3, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	d101      	bne.n	80039aa <memchr+0x12>
 80039a6:	2000      	movs	r0, #0
 80039a8:	e003      	b.n	80039b2 <memchr+0x1a>
 80039aa:	7804      	ldrb	r4, [r0, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	428c      	cmp	r4, r1
 80039b0:	d1f6      	bne.n	80039a0 <memchr+0x8>
 80039b2:	bd10      	pop	{r4, pc}

080039b4 <memcpy>:
 80039b4:	440a      	add	r2, r1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039bc:	d100      	bne.n	80039c0 <memcpy+0xc>
 80039be:	4770      	bx	lr
 80039c0:	b510      	push	{r4, lr}
 80039c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039c6:	4291      	cmp	r1, r2
 80039c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039cc:	d1f9      	bne.n	80039c2 <memcpy+0xe>
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <memmove>:
 80039d0:	4288      	cmp	r0, r1
 80039d2:	b510      	push	{r4, lr}
 80039d4:	eb01 0402 	add.w	r4, r1, r2
 80039d8:	d902      	bls.n	80039e0 <memmove+0x10>
 80039da:	4284      	cmp	r4, r0
 80039dc:	4623      	mov	r3, r4
 80039de:	d807      	bhi.n	80039f0 <memmove+0x20>
 80039e0:	1e43      	subs	r3, r0, #1
 80039e2:	42a1      	cmp	r1, r4
 80039e4:	d008      	beq.n	80039f8 <memmove+0x28>
 80039e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ee:	e7f8      	b.n	80039e2 <memmove+0x12>
 80039f0:	4601      	mov	r1, r0
 80039f2:	4402      	add	r2, r0
 80039f4:	428a      	cmp	r2, r1
 80039f6:	d100      	bne.n	80039fa <memmove+0x2a>
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a02:	e7f7      	b.n	80039f4 <memmove+0x24>

08003a04 <_free_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4605      	mov	r5, r0
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d040      	beq.n	8003a8e <_free_r+0x8a>
 8003a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a10:	1f0c      	subs	r4, r1, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfb8      	it	lt
 8003a16:	18e4      	addlt	r4, r4, r3
 8003a18:	f000 f910 	bl	8003c3c <__malloc_lock>
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <_free_r+0x8c>)
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	b933      	cbnz	r3, 8003a30 <_free_r+0x2c>
 8003a22:	6063      	str	r3, [r4, #4]
 8003a24:	6014      	str	r4, [r2, #0]
 8003a26:	4628      	mov	r0, r5
 8003a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a2c:	f000 b90c 	b.w	8003c48 <__malloc_unlock>
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	d908      	bls.n	8003a46 <_free_r+0x42>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	1821      	adds	r1, r4, r0
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	bf01      	itttt	eq
 8003a3c:	6819      	ldreq	r1, [r3, #0]
 8003a3e:	685b      	ldreq	r3, [r3, #4]
 8003a40:	1809      	addeq	r1, r1, r0
 8003a42:	6021      	streq	r1, [r4, #0]
 8003a44:	e7ed      	b.n	8003a22 <_free_r+0x1e>
 8003a46:	461a      	mov	r2, r3
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b10b      	cbz	r3, 8003a50 <_free_r+0x4c>
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	d9fa      	bls.n	8003a46 <_free_r+0x42>
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	1850      	adds	r0, r2, r1
 8003a54:	42a0      	cmp	r0, r4
 8003a56:	d10b      	bne.n	8003a70 <_free_r+0x6c>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	4401      	add	r1, r0
 8003a5c:	1850      	adds	r0, r2, r1
 8003a5e:	4283      	cmp	r3, r0
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	d1e0      	bne.n	8003a26 <_free_r+0x22>
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4401      	add	r1, r0
 8003a6a:	6011      	str	r1, [r2, #0]
 8003a6c:	6053      	str	r3, [r2, #4]
 8003a6e:	e7da      	b.n	8003a26 <_free_r+0x22>
 8003a70:	d902      	bls.n	8003a78 <_free_r+0x74>
 8003a72:	230c      	movs	r3, #12
 8003a74:	602b      	str	r3, [r5, #0]
 8003a76:	e7d6      	b.n	8003a26 <_free_r+0x22>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	1821      	adds	r1, r4, r0
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	bf01      	itttt	eq
 8003a80:	6819      	ldreq	r1, [r3, #0]
 8003a82:	685b      	ldreq	r3, [r3, #4]
 8003a84:	1809      	addeq	r1, r1, r0
 8003a86:	6021      	streq	r1, [r4, #0]
 8003a88:	6063      	str	r3, [r4, #4]
 8003a8a:	6054      	str	r4, [r2, #4]
 8003a8c:	e7cb      	b.n	8003a26 <_free_r+0x22>
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	20000264 	.word	0x20000264

08003a94 <sbrk_aligned>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4e0e      	ldr	r6, [pc, #56]	; (8003ad0 <sbrk_aligned+0x3c>)
 8003a98:	460c      	mov	r4, r1
 8003a9a:	6831      	ldr	r1, [r6, #0]
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	b911      	cbnz	r1, 8003aa6 <sbrk_aligned+0x12>
 8003aa0:	f000 f8bc 	bl	8003c1c <_sbrk_r>
 8003aa4:	6030      	str	r0, [r6, #0]
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f000 f8b7 	bl	8003c1c <_sbrk_r>
 8003aae:	1c43      	adds	r3, r0, #1
 8003ab0:	d00a      	beq.n	8003ac8 <sbrk_aligned+0x34>
 8003ab2:	1cc4      	adds	r4, r0, #3
 8003ab4:	f024 0403 	bic.w	r4, r4, #3
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d007      	beq.n	8003acc <sbrk_aligned+0x38>
 8003abc:	1a21      	subs	r1, r4, r0
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 f8ac 	bl	8003c1c <_sbrk_r>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d101      	bne.n	8003acc <sbrk_aligned+0x38>
 8003ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8003acc:	4620      	mov	r0, r4
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	20000268 	.word	0x20000268

08003ad4 <_malloc_r>:
 8003ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad8:	1ccd      	adds	r5, r1, #3
 8003ada:	f025 0503 	bic.w	r5, r5, #3
 8003ade:	3508      	adds	r5, #8
 8003ae0:	2d0c      	cmp	r5, #12
 8003ae2:	bf38      	it	cc
 8003ae4:	250c      	movcc	r5, #12
 8003ae6:	2d00      	cmp	r5, #0
 8003ae8:	4607      	mov	r7, r0
 8003aea:	db01      	blt.n	8003af0 <_malloc_r+0x1c>
 8003aec:	42a9      	cmp	r1, r5
 8003aee:	d905      	bls.n	8003afc <_malloc_r+0x28>
 8003af0:	230c      	movs	r3, #12
 8003af2:	2600      	movs	r6, #0
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4630      	mov	r0, r6
 8003af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003afc:	4e2e      	ldr	r6, [pc, #184]	; (8003bb8 <_malloc_r+0xe4>)
 8003afe:	f000 f89d 	bl	8003c3c <__malloc_lock>
 8003b02:	6833      	ldr	r3, [r6, #0]
 8003b04:	461c      	mov	r4, r3
 8003b06:	bb34      	cbnz	r4, 8003b56 <_malloc_r+0x82>
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f7ff ffc2 	bl	8003a94 <sbrk_aligned>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	4604      	mov	r4, r0
 8003b14:	d14d      	bne.n	8003bb2 <_malloc_r+0xde>
 8003b16:	6834      	ldr	r4, [r6, #0]
 8003b18:	4626      	mov	r6, r4
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	d140      	bne.n	8003ba0 <_malloc_r+0xcc>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	4631      	mov	r1, r6
 8003b22:	4638      	mov	r0, r7
 8003b24:	eb04 0803 	add.w	r8, r4, r3
 8003b28:	f000 f878 	bl	8003c1c <_sbrk_r>
 8003b2c:	4580      	cmp	r8, r0
 8003b2e:	d13a      	bne.n	8003ba6 <_malloc_r+0xd2>
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	3503      	adds	r5, #3
 8003b34:	1a6d      	subs	r5, r5, r1
 8003b36:	f025 0503 	bic.w	r5, r5, #3
 8003b3a:	3508      	adds	r5, #8
 8003b3c:	2d0c      	cmp	r5, #12
 8003b3e:	bf38      	it	cc
 8003b40:	250c      	movcc	r5, #12
 8003b42:	4638      	mov	r0, r7
 8003b44:	4629      	mov	r1, r5
 8003b46:	f7ff ffa5 	bl	8003a94 <sbrk_aligned>
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d02b      	beq.n	8003ba6 <_malloc_r+0xd2>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	442b      	add	r3, r5
 8003b52:	6023      	str	r3, [r4, #0]
 8003b54:	e00e      	b.n	8003b74 <_malloc_r+0xa0>
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	1b52      	subs	r2, r2, r5
 8003b5a:	d41e      	bmi.n	8003b9a <_malloc_r+0xc6>
 8003b5c:	2a0b      	cmp	r2, #11
 8003b5e:	d916      	bls.n	8003b8e <_malloc_r+0xba>
 8003b60:	1961      	adds	r1, r4, r5
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	6025      	str	r5, [r4, #0]
 8003b66:	bf18      	it	ne
 8003b68:	6059      	strne	r1, [r3, #4]
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	bf08      	it	eq
 8003b6e:	6031      	streq	r1, [r6, #0]
 8003b70:	5162      	str	r2, [r4, r5]
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	4638      	mov	r0, r7
 8003b76:	f104 060b 	add.w	r6, r4, #11
 8003b7a:	f000 f865 	bl	8003c48 <__malloc_unlock>
 8003b7e:	f026 0607 	bic.w	r6, r6, #7
 8003b82:	1d23      	adds	r3, r4, #4
 8003b84:	1af2      	subs	r2, r6, r3
 8003b86:	d0b6      	beq.n	8003af6 <_malloc_r+0x22>
 8003b88:	1b9b      	subs	r3, r3, r6
 8003b8a:	50a3      	str	r3, [r4, r2]
 8003b8c:	e7b3      	b.n	8003af6 <_malloc_r+0x22>
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	bf0c      	ite	eq
 8003b94:	6032      	streq	r2, [r6, #0]
 8003b96:	605a      	strne	r2, [r3, #4]
 8003b98:	e7ec      	b.n	8003b74 <_malloc_r+0xa0>
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	6864      	ldr	r4, [r4, #4]
 8003b9e:	e7b2      	b.n	8003b06 <_malloc_r+0x32>
 8003ba0:	4634      	mov	r4, r6
 8003ba2:	6876      	ldr	r6, [r6, #4]
 8003ba4:	e7b9      	b.n	8003b1a <_malloc_r+0x46>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	4638      	mov	r0, r7
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	f000 f84c 	bl	8003c48 <__malloc_unlock>
 8003bb0:	e7a1      	b.n	8003af6 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7de      	b.n	8003b74 <_malloc_r+0xa0>
 8003bb6:	bf00      	nop
 8003bb8:	20000264 	.word	0x20000264

08003bbc <_realloc_r>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	460e      	mov	r6, r1
 8003bc6:	b921      	cbnz	r1, 8003bd2 <_realloc_r+0x16>
 8003bc8:	4611      	mov	r1, r2
 8003bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	f7ff bf81 	b.w	8003ad4 <_malloc_r>
 8003bd2:	b92a      	cbnz	r2, 8003be0 <_realloc_r+0x24>
 8003bd4:	f7ff ff16 	bl	8003a04 <_free_r>
 8003bd8:	4625      	mov	r5, r4
 8003bda:	4628      	mov	r0, r5
 8003bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be0:	f000 f838 	bl	8003c54 <_malloc_usable_size_r>
 8003be4:	4284      	cmp	r4, r0
 8003be6:	4607      	mov	r7, r0
 8003be8:	d802      	bhi.n	8003bf0 <_realloc_r+0x34>
 8003bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bee:	d812      	bhi.n	8003c16 <_realloc_r+0x5a>
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f7ff ff6e 	bl	8003ad4 <_malloc_r>
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0ed      	beq.n	8003bda <_realloc_r+0x1e>
 8003bfe:	42bc      	cmp	r4, r7
 8003c00:	4622      	mov	r2, r4
 8003c02:	4631      	mov	r1, r6
 8003c04:	bf28      	it	cs
 8003c06:	463a      	movcs	r2, r7
 8003c08:	f7ff fed4 	bl	80039b4 <memcpy>
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7ff fef8 	bl	8003a04 <_free_r>
 8003c14:	e7e1      	b.n	8003bda <_realloc_r+0x1e>
 8003c16:	4635      	mov	r5, r6
 8003c18:	e7df      	b.n	8003bda <_realloc_r+0x1e>
	...

08003c1c <_sbrk_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4d05      	ldr	r5, [pc, #20]	; (8003c38 <_sbrk_r+0x1c>)
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc ffde 	bl	8000be8 <_sbrk>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_sbrk_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_sbrk_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	2000026c 	.word	0x2000026c

08003c3c <__malloc_lock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_lock+0x8>)
 8003c3e:	f000 b811 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000270 	.word	0x20000270

08003c48 <__malloc_unlock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	; (8003c50 <__malloc_unlock+0x8>)
 8003c4a:	f000 b80c 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20000270 	.word	0x20000270

08003c54 <_malloc_usable_size_r>:
 8003c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c58:	1f18      	subs	r0, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfbc      	itt	lt
 8003c5e:	580b      	ldrlt	r3, [r1, r0]
 8003c60:	18c0      	addlt	r0, r0, r3
 8003c62:	4770      	bx	lr

08003c64 <__retarget_lock_acquire_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <__retarget_lock_release_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
